Section Header

  + name := ITM_SLOT;

Section Inherit

  + parent_itm :Expanded ITM;
  
  - parent_type_finder :Expanded TYPE_FINDER;

Section Public

  - find_type type_name:CSTRING :TYPE <- prototype_parent.find_type type_name;
  
  - slot_parent :ITM_SLOT <- Self;
  
  + return_type :ITM_TYPE;

  + section :ITM_SECTION;

  + style :ITM_STYLE;
  
  + identifier :CSTRING;
  
  + expression :ITM_EXPR;
  
  + affect :ITM_AFFECT;
  
  - is_external :BOOLEAN <- ( has_keyword "External" );
  
  - is_export :BOOLEAN <- ( has_keyword "Export" );
  
  - is_internal :BOOLEAN <- ( has_keyword "Internal" );
  
  - has_keyword k:CSTRING :BOOLEAN <-
  (
     + res :BOOLEAN;
    (keywords != NULL).if {
      res := keywords.has k;
    };
    res
  );
  
  + arguments :FAST_ARRAY(ITM_ARG);

Section ITM

  - lookup_local name:CSTRING :ITM_LOCAL <-
  ( + it :ITERATOR(ITM_ARG);
    + res :ITM_LOCAL;
    
    (it := arguments.iterate).loop_v { l:ITM_ARG;
      (l.name = name).if { //??
        it.stop;
        res := l;
      };
    };
    (res = NULL).if {
      res := itm_parent.lookup_local name;
    };
    res
  );

Section ITM_PROTOTYPE

  - define_in list:LIST_PROC <-
  ( + slot:SLOT;
  
    ? {prototype_parent != NULL};
  
    slot := SLOT.clone.make Self;
    arguments.iterate.loop_v { l:ITM_ARG;
      l.get_argument_variable.if_true { e:EXPR;
        ? {e.is_valid};
        slot.add_argument e;
      }.if_false2 { e:REFERENCE(ERR);
        slot.add_error(error(e.to_e, position, "Dropping argument "+l.name+" for slot " + identifier));
      };
    };
    (return_type != NULL).if {
      return_type.to_type.if_true { t:TYPE;
        ? { t != NULL };
        slot.set_return_type (t);
      }.if_false2 { e:REFERENCE(ERR);
        slot.add_error(error(e.to_e, position, "Dropping return type for slot " + identifier));
      };
    };
    slot.finish_creation;
    list.add_slot slot;
  );
  
Section PARSER

  - make :SELF <-
  (
    arguments := FAST_ARRAY(ITM_ARG).create 0;
    return_type := NULL;
    Self
  );
  
  - set_section s:ITM_SECTION :SELF <-
  (
    section := s;
    Self
  );
  
  - set_return_type t:ITM_TYPE <-
  [ -? {t != NULL}; ]
  (
    t.set_itm_parent Self;
    return_type := t;
  )
  [ -? {return_type != NULL}; ];
  
  - set_style s:ITM_STYLE :SELF <-
  (
    style := s;
    Self
  );
  
  - add_identifier idf:CSTRING :SELF <-
  [ -? {identifier = NULL}; ]
  (
    identifier := idf;
    Self
  );
  
  - add_argument (arg:ITM_ARG) :SELF <-
  (
    arguments.add_last (arg.set_itm_parent Self);
    Self
  );
  
  - set_keywords k:ITM_KEYWORDS :SELF <-
  (
    keywords := k;
    Self
  );
  
  - set_expression e:ITM_EXPR affect a:ITM_AFFECT :SELF <-
  (
    affect := a;
    e.set_itm_parent Self;
    expression := e;
    Self
  );
  
Section Private
  
  + keywords :ITM_KEYWORDS;

