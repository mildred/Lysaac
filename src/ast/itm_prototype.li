Section Header

  + name := ITM_PROTOTYPE;

Section Inherit

  + parent_itm :Expanded ITM;

Section Public

  + slots :FAST_ARRAY(ITM_SLOT);
  
  + dispatch_slot :ITM_SLOT;
  
  + dispatcher_slot :ITM_SLOT;
  
  - position :POS <- prototype_parent.position;
  
  + itm_parent :ITM <-
  (
    crash_with_message "Trying to get parent of prototype";
    NULL
  );
  
  + prototype_parent :PROTOTYPE;
  
Section ITM
  
  - lookup_local name:CSTRING :ITM_LOCAL <- NULL;
  
  - lookup_prototype name:CSTRING :MAYBE(PROTOTYPE) <-
  (
    cluster_parent.find_prototype name
  );

Section PROTOTYPE

  - define <-
  (
    slots.iterate.loop_v { s:ITM_SLOT;
      s.define;
    };
  );

  - define_in list:LIST_PROC <-
  (
    slots.iterate.loop_v { s:ITM_SLOT;
      s.define_in list;
    };
  );

Section PARSER

  - make p:PROTOTYPE :SELF <-
  (
    prototype_parent := p;
    slots := FAST_ARRAY(ITM_SLOT).create 0;
    dispatch_slot := NULL;
    dispatcher_slot := NULL;
    Self
  );
  
  - add_slot s:ITM_SLOT :ERR <-
  ( + res:ERR;
    s.set_itm_parent Self;
    slots.add_last s;
    s.is_dispatch.if {
      (dispatch_slot = NULL).if {
        dispatch_slot := s;
      } else {
        res := dispatch_slot.position
          .error("There is already a Dispatch slot")
          .extend(s.position, "Discarding this slot");
      };
    }.elseif {s.is_dispatcher} then {
      (dispatcher_slot = NULL).if {
        dispatcher_slot := s;
      } else {
        res := dispatcher_slot.position
          .error("There is already a Dispatcher slot")
          .extend(s.position, "Discarding this slot");
      };
    };
    res
  );
