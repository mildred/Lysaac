Section Header

  + name      := PARSER_LI;

Section Inherit

  + parent_parser :Expanded PARSER;

Section SELF

  + prototype :PROTOTYPE;
  
  + ast :ITM_PROTOTYPE;

  - read_li <-
  (
    read_section_header;
    read_sections;
  );
  
  - hook_header_slot slot:ITM_SLOT <-
  (
    (slot.identifier == "name").if {
      slot.expression.is_a ITM_EXPR_PROTO.if { + p:ITM_EXPR_PROTO;
        p ?= slot.expression;
        (p.prototype == prototype.name).if_false {
          warning ("expected "+prototype.name);
        };
        slot.has_keyword "Expanded".if {
          prototype.make_expanded;
        };
      } else {
        warning("expected prototype constant");
      };
    }.elseif {slot.identifier == "type"} then {
      slot.has_keyword "Integer".if {
        slot.expression.is_a ITM_EXPR_INT.if {
          + p:ITM_EXPR_INT;
          p ?= slot.expression;
          prototype.set_base_type (BASE_TYPE.create_integer (p.value));
        } else {
          warning("expected integer constant");
        };
      };
    }.elseif {slot.identifier == "role"} then {
      + check_role :{CSTRING;};
      slot.expression.is_void.if_false {
        warning("expected void expression");
      };
      check_role := { k:CSTRING;
        slot.has_keyword k.if {
          + p :PROTOTYPE;
          p := prototype.cluster.check_prototype_for_role k;
          (p = NULL).if {
            prototype.set_role k;
          } else {
            p.set_role NULL;
            warning("There is already a prototype with the role "+k+" in "+p.filename);
          };
        };
      };
      check_role.value "String";
      check_role.value "Integer";
      check_role.value "Block";
    } else {
      warning("unknown slot "+slot.identifier);
    };
  );

  - handle_slot slot:ITM_SLOT <-
  (
    ast.add_slot slot;
  );

Section PROTOTYPE

  - make p:PROTOTYPE :SELF <-
  (
    prototype := p;
    ast := ITM_PROTOTYPE.clone.make p;
    Self
  );
  
  - parse :(ITM_PROTOTYPE,ERR) <-
  (
    open_source (prototype.filename);
    read_li;
    ast, error_stack
  );
