Section Header

  + name := ITM_EXPR_GROUP;

Section Inherit

  + parent_itm_expr :Expanded ITM_EXPR;

Section Public

  - is_void :BOOLEAN <- FALSE;

  + is_block :BOOLEAN;

  - compile_in list:LIST for t:TYPES :SELF <-
  (
    is_block.if {

      cluster_parent.type_block.if_false { e:ERR;
        results <! e.extend(position, "Discarding block");
      } else { t:TYPE;
        + block :PROC_BLOCK;
        block := PROC_BLOCK
          .clone
          .make_block Self list_parent list;

        results << EXPR.clone.make_type t value (block.global_symbol);

        list.list_procs.add_block block;
        is_block := FALSE; // Second pass
      };

    } else {

      locals.iterate.loop_v { l:ITM_LOCAL;
        l.compile_storage_in list.if_fail { e:ERR;
          results <! e;
        };
      };

      instructions.iterate.loop_v { i:ITM_INST;
        results <! i.compile_in list;
      };

      result_exprs.iterate.loop_i { i:INTEGER;
        + e:ITM_EXPR;
        e := result_exprs.item i;
        t.is_none.if {
          e.compile_in list for (TYPES.none);
        } else {
          e.compile_in list for (TYPES.from_type (t.item i));
        };
        e.results.check;
        e.results.failure.if {
          results <! e.results;
        } else {
          results <<< e.results;
        };
      };

    };
    Self
  );

  - to_string :STRING <-
  ( + res :STRING;
    res := type_name.to_string;
    is_block.if {
      res.add_last '{';
    } else {
      res.add_last '(';
    };
    res.add_last ' ';
    instructions.iterate.loop_v { i :ITM_INST;
      res.append (i.to_abstract_string);
      res.append "; ";
    };
    is_block.if {
      res.add_last '}';
    } else {
      res.add_last ')';
    };
    res
  );

Section ITM

  - lookup_local name:CSTRING :ITM_LOCAL <-
  ( + it :ITERATOR(ITM_LOCAL);
    + res :ITM_LOCAL;
    
    (it := locals.iterate).loop_v { l:ITM_LOCAL;
      (l.name = name).if {
        it.stop;
        res := l;
      };
    };
    (res = NULL).if {
      res := itm_parent.lookup_local name;
    };
    res
  );

Section PARSER

  - make :SELF <-
  (
    results      := EXPRN.clone.make;
    is_block     := FALSE;
    instructions := FAST_ARRAY(ITM_INST).create 0;
    result_exprs := FAST_ARRAY(ITM_EXPR).create 0;
    locals       := FAST_ARRAY(ITM_LOCAL).create 0;
    Self
  );
  
  - set_block :SELF <-
  [ -?{ ! is_block }; ]
  (
    is_block := TRUE;
    Self
  );
  
  - add_inst inst:ITM_INST <-
  (
    inst.set_itm_parent Self;
    instructions.add_last inst;
  );
  
  - add_expr expr:ITM_EXPR <-
  [
    -? { + l:ITM_LOCAL; l ?= expr; l = NULL };
  ]
  (
    expr.set_itm_parent Self;
    result_exprs.add_last expr;
  );
  
  - add_local local:ITM_LOCAL <-
  (
    local.set_itm_parent Self;
    locals.add_last local;
  );

Section Private

  + locals :FAST_ARRAY(ITM_LOCAL);

  + instructions :FAST_ARRAY(ITM_INST);

  + result_exprs :FAST_ARRAY(ITM_EXPR);
  
