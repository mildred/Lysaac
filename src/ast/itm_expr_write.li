Section Header

  + name := ITM_EXPR_WRITE;

Section Inherit

  + parent_itm_expr :Expanded ITM_EXPR;

Section Public

  - is_void :BOOLEAN <- FALSE;
  
  + affect :ITM_AFFECT;
  
  + slot_name :CSTRING;
  
  + expr :ITM_EXPR;

  - compile_in list:LIST :SELF <-
  [ -? { list.self != NULL }; ]
  ( + local :ITM_LOCAL;
    
    
    expr.compile_in list;
    expr.results.failure.if {
      results <! expr.results.err.extend(position, "Discarding write");
    }.elseif {expr.results.is_empty} then {
      results <! expr.position.error("Missing expression").extend(position, "Discarding write");
    } else {
      expr.results.is_single.if_false {
        results <! expr.position.error("Keep only the first expression");
      };
    
      // affect result is the expression
      results << expr.results.first;
    
      ((local := lookup_local slot_name) != NULL).if {
        // Affect local variable

        local.write (results.first) in list.if_fail { e:ERR;
          results <! e;
        };

      } else {
        // Slot write

        list.self.type.to_impl.prototype.find_slot slot_name.if_false { e:ERR;
          results <! e.extend(position, "Discarding write");
        } else { slot:SLOT;
          (!slot.slot_data).if {
            results <! slot.position.error ("Slot is not a data slot").extend(position, "Discarding write");
          } else {
            + r :REG;
            slot.shared.if {
              r := slot.shared_data_variable;
            } else {
              r := INSTR_GETELEMPTR
                .clone
                .make (list.self) slot slot
                .add_in list
                .result;
            };
            INSTR_STORE
              .clone
              .make_store_in r value (results.first)
              .add_in list;
          };
        };
      };

    };
    Self
  );

Section PARSER

  - make_affect a:ITM_AFFECT in var:CSTRING of e:ITM_EXPR :SELF <-
  (
    e.set_itm_parent Self;
    results   := EXPR1.clone;
    affect    := a;
    slot_name := var;
    expr      := e;
    Self
  );
  

