Section Header

  + name := ITM_SLOT;

Section Inherit

  + parent_itm :Expanded ITM;
  
  - parent_type_finder :Expanded TYPE_FINDER;

Section Public

  - find_type type_name:CSTRING :MAYBE(TYPE) <- prototype_parent.find_type type_name;
  
  - slot_parent :ITM_SLOT <- Self;
  
  + return_type :ITM_TYPE;

  + section :ITM_SECTION;

  + style :ITM_STYLE;
  
  + identifier :CSTRING;
  
  + expression :ITM_EXPR;
  
  + affect :ITM_AFFECT;
  
  - is_dispatch :BOOLEAN <- ( has_keyword "Dispatch" );
  
  - is_deferred :BOOLEAN <- ( has_keyword "Deferred" );
  
  - is_dispatcher :BOOLEAN <- ( has_keyword "Dispatcher" );
  
  - is_external :BOOLEAN <- ( has_keyword "External" );
  
  - is_export :BOOLEAN <- ( has_keyword "Export" );
  
  - is_internal :BOOLEAN <- ( has_keyword "Internal" );
  
  - is_inherit :BOOLEAN <- ( has_keyword "Inherit" );
  
  - is_insert :BOOLEAN <- ( has_keyword "Insert" );
  
  - is_inherit_or_insert :BOOLEAN <- ((is_inherit) || {is_insert});
  
  - has_keyword k:CSTRING :BOOLEAN <-
  ( ((keywords != NULL) && {keywords.has k}) || {section.keywords.has k} );
  
  + arguments :FAST_ARRAY(ITM_ARG);
  
  - to_string :STRING <- (type_name + "<" + identifier + ">");

Section ITM

  - lookup_local name:CSTRING :ITM_LOCAL <-
  ( + it :ITERATOR(ITM_ARG);
    + res :ITM_LOCAL;
    
    (it := arguments.iterate).loop_v { l:ITM_ARG;
      (l.name = name).if { //??
        it.stop;
        res := l;
      };
    };
    (res = NULL).if {
      res := itm_parent.lookup_local name;
    };
    res
  );

Section ITM_PROTOTYPE

  - define_in list:LIST_PROC <-
  ( + slot:SLOT_IMPL;
    + maybe_type:MAYBE(TYPE_IMPL);
  
    ? {prototype_parent != NULL};
  
    slot := SLOT_IMPL.clone.make Self;
    
    ((expression != NULL) && {is_dispatch}).if {
      expression.is_a ITM_EXPR_INT.if {
        + p:ITM_EXPR_INT;
        p ?= expression;
        slot.prototype.set_dispatch_value (p.value);
      } else {
        slot.add_error(expression.position.error("Expected integer constant for Dispatch slot"));
      };
    };
    
    arguments.iterate.loop_v { l:ITM_ARG;
      l.get_argument_variable.if_false { e:ERR;
        slot.add_error(e.extend(position, "Dropping argument "+l.name+" for slot " + identifier));
      } else { e:EXPR;
        ? {e.is_valid};
        slot.add_argument e;
      };
    };
    (return_type != NULL).if {
      (maybe_type := return_type.to_type).if_false { e:ERR;
        slot.add_error(e.extend(position, "Dropping return type for slot " + identifier));
      } else { t:TYPE_IMPL;
        ? { t != NULL };
        slot.set_return_type (t);
      };
    };
    slot.finish_creation_in list;
    
    ((is_inherit_or_insert) && {return_type = NULL}).if {
      slot.add_error(position.error("Inherit or Insert slot do not have a return type"));
    }.elseif {(is_inherit_or_insert) && {maybe_type.ok}} then {
      + p:PROTOTYPE;
      // if it is an Inherit or Insert slot:
      //   - define the parent type unless it is in state defining (in which case,
      //     raise a warning because of looping inheritance) or unless it is already
      //     defined.
      //   - for each of the parent slot, create an appropriate SLOT_INHERIT object
      //     and add it to the prototype
      p := maybe_type.element.prototype;
      p.defining.if {
        slot.add_error(position.error("Inheritance loop, discarding inheritance"));
      }.elseif {!p.defined} then {
        p.define_in list;
      };
      p.slots.iterate.loop_v { s:SLOT;
        s.can_be_inherited.if {
          + si :SLOT_INHERIT;
          si := SLOT_INHERIT.clone.make_from s in prototype_parent;
          list.add_slot si;
        };
      };
    };
  );
  
Section PARSER

  - make :SELF <-
  (
    arguments := FAST_ARRAY(ITM_ARG).create 0;
    return_type := NULL;
    Self
  );
  
  - set_section s:ITM_SECTION :SELF <-
  (
    section := s;
    Self
  );
  
  - set_return_type t:ITM_TYPE <-
  [ -? {t != NULL}; ]
  (
    //warnln (to_string + ".set_return_type " + t.to_string);
    t.set_itm_parent Self;
    return_type := t;
  )
  [ -? {return_type != NULL}; ];
  
  - set_style s:ITM_STYLE :SELF <-
  (
    style := s;
    Self
  );
  
  - add_identifier idf:CSTRING :SELF <-
  [ -? {identifier = NULL}; ]
  (
    identifier := idf;
    Self
  );
  
  - add_argument (arg:ITM_ARG) :SELF <-
  (
    arguments.add_last (arg.set_itm_parent Self);
    Self
  );
  
  - set_keywords k:ITM_KEYWORDS :SELF <-
  (
    keywords := k;
    Self
  );
  
  - set_expression e:ITM_EXPR affect a:ITM_AFFECT :SELF <-
  (
    affect := a;
    e.set_itm_parent Self;
    expression := e;
    Self
  );
  
Section Private
  
  + keywords :ITM_KEYWORDS;

