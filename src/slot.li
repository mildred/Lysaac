Section Header

  + name := SLOT;

Section Inherit

  + parent_proc :Expanded PROC;

Section Public

  - name :CSTRING <- ast.identifier;
    
  + list :LIST;
  
  - external :BOOLEAN <- ast.is_external;
  
  + external_name :CSTRING <- name;
  
  + arguments :FAST_ARRAY(REG);
  
  + prototype :PROTOTYPE;

  + self :REG;
  
  + result_type :TYPE <- (not_yet_implemented; NULL);

Section ITM_SLOT

  - make s:ITM_SLOT :SELF <-
  ( + t:TYPE;
    arguments := FAST_ARRAY(REG).create 0;
    list := LIST.clone.make Self;
    ast  := s;
    prototype := ast.prototype_parent;
    ? {prototype != NULL};
    self := REG.clone.make INSTR_NOP static_type (t := prototype.to_type);
    //? { ! t.base_type.void };
    ? { self.is_valid };
    ? { t != NULL };
    ? { self.type != NULL };
    ? { ! self.is_realized };
    prototype.add_slot Self;
    Self
  );
  
  - add_argument v:REG <- arguments.add_last v;

Section LIST_PROC

  - compile list_procs:LIST_PROC <-
  [
   ? { self.is_valid };
  ]
  (
    list.set_list_procs list_procs;
    external.if {
      // External Slot
      + sym :ITM_EXPR_SYM;
      sym ?= ast.expression;
      ? { sym != NULL };
      external_name := sym.symbol;
    }.elseif {ast.expression != NULL} then {
      // Nominal case
      reg_result := ast.expression.compile_in list;
    } else {
      // Empty slot
    };
  );
  
  - link <-
  (
    external.if_false {
      list.link;
    };
  );
  
  - generate gen:GENERATOR <-
  (
    warnln ("generate "+name);
    external.if {
      gen.declare_sub external_name args {
        arguments.iterate.loop_v { v:REG;
          gen.arg { v.type.generate gen; };
        };
      };
    } else {
      ? { ! self.is_realized };
      gen.sub external_name self self args {
        arguments.iterate.loop_v { v:REG;
          v.generate_arg gen;
        };
      } do {
        is_block_value_slot.if {
          ? { reg_result = NULL };
          reg_result := REG.clone.make NULL static_type result_type;
          gen.call_ptr (list.self) result reg_result;
        } else {
          list.generate gen;
        };
      } return reg_result;
    };
  );

Section Private

  - is_block_value_slot :BOOLEAN <-
  ( (prototype.role == "Block") &&
    {ast.has_keyword "Internal"} &&
    {ast.has_keyword "Value"}
  );

  + ast :ITM_SLOT;
  
  + reg_result :REG;


