Section Header

  + name := SLOT;

Section Inherit

  + parent_any :Expanded ANY;

Section Public

  - name :CSTRING <- ast.identifier;
    
  + list :LIST;
  
  - external :BOOLEAN <- ast.is_external;
  
  + external_name :CSTRING <- name;
  
  + argument :VAR;
  
  + prototype :PROTOTYPE;

  + self :VAR;

Section ITM_SLOT

  - make s:ITM_SLOT :SELF <-
  ( + argument_type:TYPE;
  
    list := LIST.clone.make Self;
    ast := s;
    (ast.argument_type != NULL).if {
      argument_type := ast.argument_type.to_type;
      argument := VAR.clone.make NULL static_type (argument_type);
    };
    prototype := ast.prototype_parent;
    self := VAR.clone.make NULL static_type (prototype.to_type);
    ast.prototype_parent.add_slot Self;
    Self
  );

Section LIST_SLOT

  - compile <-
  (
    external.if {
      + sym :ITM_EXPR_SYM;
      sym ?= ast.expression;
      ? { sym != NULL };
      external_name := sym.symbol;
    }.elseif {ast.expression != NULL} then {
      ast.expression.compile_in list;
    };
  );
  
  - link <-
  (
    external.if_false {
      list.link;
    };
  );
  
  - generate gen:GENERATOR <-
  (
    external.if {
      gen.declare_sub external_name args {
        (argument != NULL).if {
          gen.arg { argument.type.generate gen; };
        };
      };
    } else {
      gen.sub external_name self self args {
        (argument != NULL).if {
          argument.generate_arg gen name (ast.argument);
        };
      } do {
        list.generate gen;
      };
    };
  );

Section Private

  + ast :ITM_SLOT;

