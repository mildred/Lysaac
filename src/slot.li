Section Header

  + name := SLOT;

Section Inherit

  + parent_proc :Expanded PROC;

Section Public

  - name :CSTRING <- ast.identifier;
    
  + list :LIST;
  
  - external :BOOLEAN <- ast.is_external;
  
  - export :BOOLEAN <- ast.is_export;
  
  - external_or_export :BOOLEAN <- (external) || {export};
  
  + external_name :CSTRING <- name;
  
  + arguments :FAST_ARRAY(REG);
  
  + prototype :PROTOTYPE;

  + self :EXPR;
  
  + result_type :TYPE;
  
  - style :ITM_STYLE <- ast.style;
  
  - has_result :BOOLEAN <- (result_type != NULL);
  
  - to_string :STRING <-
  ( + res:STRING;
    res := type_name + "<" + name;
    (result_type != NULL).if {
      res.append (":" + result_type.to_string + ">");
    };
    res.append ">";
    res
  );
  
  - is_compiled_data_slot :BOOLEAN <- type_index >= 0;
  
  + type_index :INTEGER := -1;

Section PROTOTYPE

  + default_value :EXPR;

Section ITM_SLOT

  - make s:ITM_SLOT :SELF <-
  (
    arguments := FAST_ARRAY(REG).create 0;
    list          := LIST.clone.make Self;
    ast           := s;
    prototype     := ast.prototype_parent;
    default_value := EXPR;
    self          := EXPR;
    type_index    := -1;
    ? {prototype != NULL};
    Self
  );
  
  - add_argument v:REG <- arguments.add_last v;
  
  - set_return_type t:TYPE <-
  (
    default_value := EXPR.clone.make_type t;
    result_type := t;
  );
  
  - finish_creation <-
  (
    warnln (prototype.to_string + ".add_slot " + to_string);
    prototype.add_slot Self;
  );

Section LIST_PROC

  - compile list_procs:LIST_PROC <-
  ( + t:TYPE;
    t := prototype.to_type;
    t.void.if {
      self := EXPR;
    } else {
      self := EXPR.clone.make_type t;
    };
    ? { self.is_valid };
    list.set_list_procs list_procs;
    external.if {
      // External Slot
      + sym :ITM_EXPR_SYM;
      sym ?= ast.expression;
      ? { sym != NULL };
      external_name := sym.symbol;
    }.elseif {ast.expression != NULL} then {
      // Nominal case
      reg_result := ast.expression.compile_in list.result.reg;
    } else {
      // Empty slot
    };
    warnln ("Compiled "+to_string);
  );
  
  - link <-
  (
    external.if_false {
      list.link;
    };
  );
  
  - generate gen:GENERATOR <-
  (
    warnln ("generate "+name);
    external.if {
      gen.declare_sub external_name args {
        arguments.iterate.loop_v { v:REG;
          gen.arg { v.base_type.generate gen; };
        };
      };
    } else {
      ? { ! self.reg.is_realized };
      gen.sub external_name self self args {
        export.if_false {
          self.reg.generate_arg gen;
        };
        arguments.iterate.loop_v { v:REG;
          v.generate_arg gen;
        };
      } do {
        export.if {
          //self.reg.realize_using (prototype.prototype_value);
          //gen.expr_undef_in self;
          prototype.generate gen prototype_value self;
        };
        ? { self.reg.is_realized };
        is_block_value_slot.if {
          gen.call_ptr (list.self);
        } else {
          list.generate gen;
        };
      } return reg_result;
    };
  );

Section PROTOTYPE

  - set_type_index i:INTEGER <-
  [ -? {i >= 0}; ]
  (
    warnln (to_string + ".type_index = " + i.to_string);
    type_index := i;
  )
  [ +? {is_compiled_data_slot}; ];

Section Private

  - is_block_value_slot :BOOLEAN <-
  ( (prototype.role == "Block") &&
    {ast.has_keyword "Internal"} &&
    {ast.has_keyword "Value"}
  );

  + ast :ITM_SLOT;
  
  + reg_result :REG;


