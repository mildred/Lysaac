Section Header

  + name := SLOT_INHERIT;

Section Inherit

  + parent_slot :Expanded SLOT;

Section Public

  //////////////////////////////////////////////////////////////////////////////
  //
  // Identification
  //

  - name :CSTRING <- inherit_from.name;
  
  - style     :ITM_STYLE <- inherit_from.style;
  
  - external    :BOOLEAN <- inherit_from.external;
  - export      :BOOLEAN <- inherit_from.export;
  - internal    :BOOLEAN <- inherit_from.internal;
  - dispatch    :BOOLEAN <- inherit_from.dispatch;
  - dispatcher  :BOOLEAN <- inherit_from.dispatcher;
  - inherit     :BOOLEAN <- inherit_from.inherit;
  - insert      :BOOLEAN <- inherit_from.insert;
  - is_deferred :BOOLEAN <- inherit_from.is_deferred;
    
  - slot_data   :BOOLEAN <- inherit_from.slot_data;
  
  - bound       :BOOLEAN <- (inherit_from != NULL) && {inherit_from.bound};
  
  //////////////////////////////////////////////////////////////////////////////
  //
  // Inheritance
  //
  
  - has_been_redefined :BOOLEAN <- FALSE;

  //////////////////////////////////////////////////////////////////////////////
  //
  // Location
  //
  
  - root_prototype :PROTOTYPE <- inherit_from.root_prototype;
  
  //////////////////////////////////////////////////////////////////////////////
  //
  // Signature
  //
  
  - result_type :TYPE <- inherit_from.result_type;
  
  //////////////////////////////////////////////////////////////////////////////
  //
  // Implementation
  //
  
  - internal_opcode :CSTRING <- inherit_from.internal_opcode;

  //////////////////////////////////////////////////////////////////////////////
  //
  // Debug
  //
  
  - position :POS <- inherit_from.position;

Section Private

  //////////////////////////////////////////////////////////////////////////////
  //
  // Private Interface
  //
  
  + inherit_from :SLOT;

Section SLOT

  - ast_expression :ITM_EXPR <- inherit_from.ast_expression;

Section ITM_SLOT

  //////////////////////////////////////////////////////////////////////////////
  //
  // Creation
  //

  - make_from s:SLOT in p:PROTOTYPE :SELF <-
  [
    -? {s.bound};
  ]
  (
    make_error_collector ("slot " + s.name);
    arguments      := FAST_ARRAY(EXPR).create 0;
    inherit_from   := s;
    self_prototype := p;
    global_symbol  := REG.clone;
    inherited_from := FAST_ARRAY(SLOT).create 0;
    inherited_from.add_last s;
    s.arguments.iterate.loop_v { arg:EXPR;
      arguments.add_last (arg.dup);
    };
    self_prototype.add_slot Self;
    Self
  );
