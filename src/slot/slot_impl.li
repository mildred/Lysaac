Section Header

  + name := SLOT_IMPL;

Section Inherit

  + parent_slot :Expanded SLOT;

Section Public

  //////////////////////////////////////////////////////////////////////////////
  //
  // Identification
  //

  - name :CSTRING <- ast.identifier;
  
  - style     :ITM_STYLE <- ast.style;
  
  - external    :BOOLEAN <- ast.is_external;
  - export      :BOOLEAN <- ast.is_export;
  - internal    :BOOLEAN <- ast.is_internal;
  - dispatch    :BOOLEAN <- ast.is_dispatch;
  - dispatcher  :BOOLEAN <- ast.is_dispatcher;
  - inherit     :BOOLEAN <- ast.is_inherit;
  - insert      :BOOLEAN <- ast.is_insert;
  - is_deferred :BOOLEAN <- ast.is_deferred;
  
  - slot_data :BOOLEAN <- (ast.affect.data);
  
  //////////////////////////////////////////////////////////////////////////////
  //
  // Signature
  //
  
  + result_type :TYPE;

  //////////////////////////////////////////////////////////////////////////////
  //
  // Implementation
  //
  
  + internal_opcode :CSTRING := "";

  //////////////////////////////////////////////////////////////////////////////
  //
  // Debug
  //
  
  - position :POS <- ast.position;

Section Private

  //////////////////////////////////////////////////////////////////////////////
  //
  // Private Interface
  //

  + ast :ITM_SLOT;

Section SLOT

  - ast_expression :ITM_EXPR <- ast.expression;

Section ITM_SLOT

  //////////////////////////////////////////////////////////////////////////////
  //
  // Creation
  //

  - make s:ITM_SLOT :SELF <-
  (
    make_error_collector ("slot " + s.identifier);
    arguments      := FAST_ARRAY(EXPR).create 0;
    list           := NULL;
    ast            := s;
    self_prototype := ast.prototype_parent;
    type_index     := -1;
    result_type    := NULL;
    global_symbol  := REG.clone;
    inherited_from := FAST_ARRAY(SLOT).create 0;
    ? {self_prototype != NULL};
    Self
  );
  
  - add_argument v:EXPR <- arguments.add_last v;
  
  - set_return_type t:TYPE <-
  [ -? { t != NULL }; ]
  (
    result_type := t;
  );
  
  - finish_creation_in list:LIST_PROC <-
  ( + error :BOOLEAN;
    (internal).if {
      + sym :ITM_EXPR_SYM;
      sym ?= ast.expression;
      (sym = NULL).if {
        error := TRUE;
        add_error(ast.expression.position.error("Expected symbol"));
      } else {
        internal_opcode := sym.symbol;
      };
    };
    error.if_false {
      + replace_slot :SLOT;
      self_prototype.find_slot name.if { s:SLOT;
        ((s.is_inherited) && {!s.has_been_redefined}).if {
          replace_slot := s;
        };
      };
      (replace_slot != NULL).if {
        inherited_from := replace_slot.inherited_from;
        type_index     := replace_slot.type_index;
        list.remove_slot replace_slot;
        self_prototype.replace_slot replace_slot by Self;
      } else {
        self_prototype.add_slot Self;
      };
      list.add_slot Self;
    };
  );
