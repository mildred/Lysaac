Section Header

  + name      := PARSER_CLI;

Section Inherit

  + parent_parser :Expanded PARSER;

Section SELF

  + cluster :CLUSTER;

  - read_cli <-
  (
    read_section_header;
  );
  
  - hook_header_slot slot:ITM_SLOT <-
  (
    (slot.identifier == "name").if {
      slot.expression.is_a ITM_EXPR_PROTO.if { + p:ITM_EXPR_PROTO;
        p ?= slot.expression;
        (p.prototype.as_lower == cluster.name).if_false {
          print_warning;
          "expected ".print; cluster.name.as_upper.println;
        };
      } else {
        print_warning;
        "expected prototype constant".println;
      };
    }.elseif {slot.identifier == "path"} then {
      slot.expression.is_a ITM_EXPR_STR.if { + s:ITM_EXPR_STR;
        s ?= slot.expression;
        cluster.set_path (s.string);
      } else {
        print_warning;
        "expected string constant".println;
      };
    } else {
      print_warning;
      "unknown slot ".print; slot.identifier.println;
    };
    
  );

Section CLUSTER

  - make c:CLUSTER :SELF <-
  (
    cluster := c;
    Self
  );
  
  - parse <-
  (
    open_source (cluster.filename);
    read_cli;
  );
