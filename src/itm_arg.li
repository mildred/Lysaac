Section Header

  + name := ITM_ARG;

Section Inherit

  + parent_itm_expr_local :Expanded ITM_LOCAL;

Section Public

  - style :ITM_STYLE := ITM_STYLE.clone.make '+';

  - read_in list:LIST :MAYBE(EXPR) <-
  [
    -? { result != NULL };
    -? { result.reg.is_valid };
  ]
  (
    MAYBE(EXPR).clone.make result
  );
  
  - write val:EXPR in list:LIST :ERR <-
  (
    position.error("Attempt to write an argument")
  );

Section ITM_SLOT

  - get_argument_variable :MAYBE(EXPR) <-
  (
    + r :REG;
    + res :MAYBE(EXPR);

    r := REG.clone;
    type.to_type.if_false { err:ERR;
      res <! err.extend(position, "Cannot resolve type for "+name); // TODO
      result = NULL;
    } else { t:TYPE;
      r .make_type t
        .make_pretty_name name;
      ? { r.is_valid };
      result := EXPR.clone.make(r, t);
      res << result;
    };
    res
  );

Section PARSER

  - make (n:CSTRING, t:ITM_TYPE) :SELF <-
  (
    t.set_itm_parent Self;
    name := n;
    type := t;
    Self
  );

Section Private

  + result :EXPR := EXPR;

