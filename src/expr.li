Section Header

  + name := EXPR;
  
  - export := REG, TYPE;

Section Inherit

  + parent_any :Expanded ANY;

Section Public

  + reg  :REG  := REG;
  + type :TYPE := NULL;
  
  - is_valid :BOOLEAN <- (((reg != NULL) || {reg.is_valid}) && {type != NULL});

  - make (r:REG, t:TYPE) :SELF <-
  [
    -? { t != NULL };
    -? { r != NULL };
    -? { ! r.base_type.void };
    -? { r.is_valid };
    (t.base_type == r.base_type).if_false {
      warnln(t.base_type.to_string + " != " + r.base_type.to_string);
    };
    -? { t.base_type == r.base_type };
  ]
  (
    reg  := r;
    type := t;
    Self
  )
  [
    +? { is_valid };
  ];
  
  - make_type t:TYPE :SELF <-
  [
    -? { t != NULL };
    -? { t.prototype.defined };
  ]
  (
    make(REG.clone.make_type t, t)
  );

  - to_reg  :REG  <- [ -? { reg != NULL }; ] reg;
  - to_type :TYPE <- [ -? { is_valid    }; ] type;

