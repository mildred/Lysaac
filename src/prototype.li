Section Header

  + name := PROTOTYPE;

Section Inherit

  + parent_any :Expanded ANY;
  
  - parent_i_find_type :Expanded I_FIND_TYPE;

Section Public

  - made      :BOOLEAN <- state >= state_made;
  - parsed    :BOOLEAN <- state >= state_parsed;
  - compiled  :BOOLEAN <- state >= state_compiled;
  - generated :BOOLEAN <- state >= state_generated;

  - find_type type_name:CSTRING :TYPE <- cluster.find_type type_name;
  
  + base_type :BASE_TYPE;
  
  + filename :CSTRING;
  
  + role :CSTRING;
  
  + cluster :CLUSTER;
  
  + expanded :BOOLEAN;
  
  + name :CSTRING <-
  ( + str :ABSTRACT_STRING;
    
    str := PATH_HELPER.basename filename;
    name := str.substring (str.lower) to (str.upper - 3).as_upper
  );
  
  - parse <-
  [ -? {made}; -? {! parsed}; ]
  (
    warnln ("Parse "+name);
    ast := parser.parse;
    state := state_parsed;
  )
  [ +? {parsed}; ];
  
  - compile_in list:LIST_PROC <-
  [ -? {parsed}; -? {! compiled}; ]
  (
    warnln ("Compile "+name);
    ast.compile_in list;
    state := state_compiled;
  )
  [ +? {compiled}; ];
  
  - generate gen:GENERATOR <-
  [ -? {compiled}; -? {! generated}; ]
  (
    warnln ("Generate "+name);
    slots.iterate.loop_v { s:SLOT;
      s.generate gen;
    };
    state := state_generated;
  )
  [ +? {generated}; ];

Section INSTR_CALL

  - find_slot name:CSTRING :SLOT <-
  [ -? {parsed}; ]
  ( + it:ITERATOR(SLOT);
    + res :SLOT;
    
    (it := slots.iterate).loop_v { s:SLOT;
      (s.name = name).if {
        res := s;
        it.stop;
      };
    };
    res
  );

Section CLUSTER, ITM_TYPE, SLOT

  - to_type :TYPE <-
  [ -? {parsed}; ]
  (
    TYPE.clone.make Self
  );

  - to_type_block :TYPE <-
  [ -? {parsed}; ]
  (
    TYPE.clone.make_block Self
  );

Section CLUSTER_ITEM

  - make_file file:CSTRING cluster c:CLUSTER :SELF <-
  (
    base_type := NULL;
    expanded := FALSE;
    cluster  := c;
    filename := file;
    ast      := NULL;
    slots    := FAST_ARRAY(SLOT).create 0;
    parser   := PARSER_LI.clone.make Self;
    state    := state_made;
    Self
  );

Section PARSER_LI

  - set_role r:CSTRING <-
  [ -? {made}; -? {! parsed}; ]
  (
    role := r;
    cluster.set_prototype Self for_role r;
  );

  - set_base_type t:BASE_TYPE <-
  [
    -? {made};
    -? {! parsed};
    -? { t != NULL };
  ]
  (
    base_type := t;
  );

Section SLOT

  - add_slot s:SLOT <-
  (
    slots.add_last s;
  );

Section SLOT_BLOCK

  - add_slot_block s:SLOT_BLOCK <-
  (
    slots.add_last s;
  );

Section Private

  + state :INTEGER;
  
  - state_none      :INTEGER := 0;
  - state_made      :INTEGER := 1;
  - state_parsed    :INTEGER := 3;
  - state_compiled  :INTEGER := 4;
  - state_generated :INTEGER := 5;

  + parser :PARSER_LI;

  + ast :ITM_PROTOTYPE;

  + slots :FAST_ARRAY(SLOT);


