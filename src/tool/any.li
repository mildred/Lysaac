Section Header

  + name := ANY;

Section Inherit

  - parent_object : OBJECT := OBJECT;

Section Public

  - dup :SELF <-
  ( + res :SELF;
    res := clone;
    res.make_duplicate_of Self;
    res
  );
  
  - make_duplicate_of other:SELF <- deferred;

  - is_a obj:T :BOOLEAN <- same_dynamic_type obj;
  
  - if_a obj:T then true:{SELF;} :BOOLEAN <-
  (
    is_a T.if {
      true.value Self;
    }
  );
  
  - if_a obj:T then true:{SELF;} else false:{} :BOOLEAN <-
  (
    is_a T.if {
      true.value Self;
    } else false
  );

  - deferred <-
  (
    crash_with_message ("Slot deferred in " + type_name);
  );
  
  - warn s:ABSTRACT_STRING <-
  (
    STD_ERROR.put_string s;
  );
  
  - warnln s:ABSTRACT_STRING <-
  (
    STD_ERROR.put_string s;
    STD_ERROR.put_string "\n";
  );
  
  - dbg s:ABSTRACT_STRING <- warn s;
  - dbgln s:ABSTRACT_STRING <- warnln s;

  /*
  - error (e:ERR, p:POS, m:ABSTRACT_STRING) :ERR <-
  ( + res :ERR;
    (e.success).if {
      res := ERR.create m position p;
    } else {
      res := ERR.create m position p parent e;
    };
    res
  );
  */
  
  - progress_notice info:ABSTRACT_STRING <- (warn "*** "; warnln info;);
  
  - progress_step (cur,max:INTEGER) message info:ABSTRACT_STRING <-
  ( + percent :INTEGER;
    + p:STRING;
    
    percent := cur * 100 / max;
    p := percent.to_string;
    warn "*** [";
    p.count
      .when 1 then { warn "  "; }
      .when 2 then { warn " "; };
    warn p;
    warn "%] ";
    warn "(";
    warn (cur.to_string);
    warn "/";
    warn (max.to_string);
    warn ") ";
    warnln info;
  );
  
  - pretty_type t:TYPE :ABSTRACT_STRING <-
  ( + res :ABSTRACT_STRING;
    (t = NULL).if {
      res := "VOID";
    } else {
      res := t.name;
    };
    res
  );
  
  // ly_          lysaac namespace
  // ly_<P>_0     namespace for prototype P with no parameters
  // ly_<P>_0_<S> namespace for slot P.S
  //              normal slots are prefixed with their name length
  //              special feature slots are only [a-z]
  
  - symbol_encode_prototype prototype:PROTOTYPE slot slot:SLOT :CSTRING <-
  ( + res :ABSTRACT_STRING;
    res := "ly_" + encode_symbol_part("P", prototype.name) + "_0_";
    slot.special_feature_slot.if {
      res := res + slot.name;
    } else {
      res := res + encode_symbol_part("S", slot.name);
    };
    res
  );

Section Private

  - encode_symbol_part (type:ABSTRACT_STRING, n:CSTRING) :ABSTRACT_STRING <-
  [
    -? { type.count = 1 };
  ]
  (
    n.count.to_string + type + n
  );

