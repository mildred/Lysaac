Section Header

  + name := ITM_EXPR_READ;

Section Inherit

  + parent_itm_expr :Expanded ITM_EXPR;

Section Public

  - is_void :BOOLEAN <- FALSE;

  + receiver :ITM_EXPR;
  + slot     :CSTRING;
  
  + has_results :BOOLEAN := TRUE;

  + result   :EXPR := EXPR;
  
  + arguments :FAST_ARRAY(ITM_EXPR);
  
  - compile_in list:LIST :SELF <-
  [
    ? { list.self != NULL };
    ? { list.self.is_valid };
  ]
  ( + local :ITM_LOCAL;
    + self  :EXPR;
    
    ((receiver = NULL) && {(local := lookup_local slot) != NULL}).if {
      //
      // Local variable
      //

      local.read_in list.if_false { e:ERR;
        results <! e;
      } else { e:EXPR;
        ? { e.is_valid };
        results << e;
      };

    } else {
      //
      // Slot call
      //
      
      self := list.self;

      (receiver != NULL).if {
        receiver.compile_in list.results.failure.if {
          results <! receiver.results.err;
        }.elseif {receiver.results.is_empty} then {
          results <! receiver.position.error("Empty expression")
            .extend(position,"Receiver is a null expression, using Self");
        } else {
          receiver.results.is_single.if_false {
            results <! receiver.position.error("Multiple expression")
              .extend(position,"Only considering ");
          };
          self := receiver.results.first;
        };
      };

      ? {self != NULL};
      ? {self.is_valid};

      self.type.prototype.find_slot slot.if_false { e:ERR;
        results <! e.extend(position, "Discarding message");
      
      } else { slot_obj :SLOT;
        + call :INSTR_CALL;
        call := INSTR_CALL
          .clone
          .make_read self slot slot_obj;
        arguments.iterate.loop_v { a:ITM_EXPR;
          a.compile_in list;
          a.results.failure.if {
            results <! a.results.err.extend(a.position, "Discarding argument");
          } else {
            a.results.lower.to (a.results.upper) do { i:INTEGER;
              call.add_argument (a.results.item i);
            };
          };
        };
        call.finalize.if_fail { e:ERR;
          results <! e.extend(position, "Calling " + slot);
        } else {
          call.add_in list;
          (slot_obj.has_result).if {
            results << EXPR.clone.make (call.result, slot_obj.result_type);
            ? { results.is_single };
            ? { results.last.is_valid };
          };
        };
      };
    };

    Self
  );

  - to_string :STRING <-
  ( + res :STRING;
    res := type_name + "<";
    (receiver != NULL).if {
      res.append (receiver.to_abstract_string);
      res.add_last '.';
    };
    res.append slot;
    arguments.iterate.loop_v { a:ITM_EXPR;
      res.add_last ' ';
      res.append (a.to_abstract_string);
    };
    res.add_last '>';
    res
  );

Section PARSER
  
  - make s:CSTRING :SELF <-
  (
    results   := EXPR1.clone;
    slot      := s;
    receiver  := NULL;
    arguments := FAST_ARRAY(ITM_EXPR).create 0;
    Self
  );
  
  - add_argument arg:ITM_EXPR <-
  (
    arg.set_itm_parent Self;
    arguments.add_last arg;
  );
  
  - set_self s:ITM_EXPR <-
  [
    -? { receiver = NULL };
  ]
  (
    s.set_itm_parent Self;
    receiver := s;
  );

