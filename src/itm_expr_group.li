Section Header

  + name := ITM_EXPR_GROUP;

Section Inherit

  + parent_itm_expr :Expanded ITM_EXPR;

Section Public

  - is_void :BOOLEAN <- FALSE;

  + is_block :BOOLEAN;

  - compile_in list:LIST :VAR <-
  ( + res :VAR;
  
    res := VAR;

    is_block.if {
      + block :PROC_BLOCK;
      block := PROC_BLOCK.clone.make_block Self;
      res := INSTR_FNPTR.clone.make (block.external_name) cluster cluster_parent.add_in list.result;
      list.list_procs.add_block block;
      ? { res.type != NULL };
    } else {
      instructions.iterate.loop_v { i:ITM_INST;
        i.compile_in list;
      };
    };

    res
  )
  [
    +? {{ ! is_block } || { Result.type != NULL }};
  ];
  
  - to_string :STRING <-
  ( + res :STRING;
    res := type_name.to_string;
    is_block.if {
      res.add_last '{';
    } else {
      res.add_last '(';
    };
    res.add_last ' ';
    instructions.iterate.loop_v { i :ITM_INST;
      res.append (i.to_abstract_string);
      res.append "; ";
    };
    is_block.if {
      res.add_last '}';
    } else {
      res.add_last ')';
    };
    res
  );

Section PARSER

  - make :SELF <-
  (
    is_block := FALSE;
    instructions := FAST_ARRAY(ITM_INST).create 0;
    Self
  );
  
  - set_block :SELF <-
  [ -?{ ! is_block }; ]
  (
    is_block := TRUE;
    Self
  );
  
  - add_inst inst:ITM_INST <-
  (
    inst.set_itm_parent Self;
    instructions.add_last inst;
  );

Section Private

  + instructions :FAST_ARRAY(ITM_INST);
