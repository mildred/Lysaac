Section Header

  + name := INSTR_CALL;

Section Inherit

  + parent_instr :Expanded INSTR;

Section Public

  //
  // Receiver
  //

  + receiver :REG;
  
  //
  // Slot
  //

  - slot :SLOT <-
  ( + res :SLOT;
    (res = NULL).if {
      res := receiver.type.prototype.find_slot name;
    };
    res
  );

  //
  // Link
  //
  
  - link <-
  (
    (slot = NULL).if {
      crash_with_message ("Cannot find slot "+name+" in "+receiver.type.prototype.name);
    };
  );

  //
  // Generate
  //

  - generate gen:GENERATOR <-
  (
    gen.call (slot.name) args {
      generate_arg receiver in gen;
      args.iterate.loop_v { a:REG;
        generate_arg a in gen;
      };
    };
  );

Section Private

  - generate_arg arg:REG in gen:GENERATOR <-
  [ -? { arg.type != NULL }; ]
  (
    arg.type.base_type.void.if_false {
      gen.call_arg arg type { arg.type.generate gen };
    };
  );

Section ITM_EXPR_READ

  - make_itm i:ITM_EXPR_READ receiver r:REG :SELF <-
  [ -? { r.type != NULL }; ]
  (
    receiver := r;
    ast      := i;
    args     := FAST_ARRAY(REG).create 0;
    Self
  );
  
  - add_argument v:REG <-
  [
    -? { v.type != NULL };
  ]
  (
    args.add_last v;
  );

Section Private

  - name :CSTRING <- ast.slot;
  
  + ast  :ITM_EXPR_READ;
  + args :FAST_ARRAY(REG);

