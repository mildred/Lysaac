Section Header

  + name := INSTR_CALL;

Section Inherit

  + parent_instr :Expanded INSTR;

Section Public

  + receiver :EXPR;
  
  + include_self :BOOLEAN;

  //
  // Link
  //
  
  - link;

  //
  // Generate
  //

  - generate gen:GENERATOR <-
  (
    (slot = NULL).if {
      gen.call_ptr function_pointer args { generate_args gen; } result result;
    } else {
      gen.call (slot.name) args { generate_args gen; } result result;
    };
  );

Section Private

  - generate_args gen:GENERATOR <-
  (
    include_self.if {
      generate_arg receiver in gen;
    };
    args.iterate.loop_v { a:EXPR;
      generate_arg a in gen;
    };
  );

  - generate_arg arg:REG in gen:GENERATOR <-
  [ -? { arg.is_valid }; ]
  (
    arg.base_type.void.if_false {
      gen.call_arg arg type { arg.base_type.generate gen };
    };
  );

Section Public

  - make_read receiver_expr:EXPR slot s:SLOT :SELF <-
  [
    -? { s != NULL  };
    -? { receiver_expr.is_valid };
  ]
  (
    receiver      := receiver_expr;
    args          := FAST_ARRAY(EXPR).create 0;
    result        := REG.clone;
    slot          := s;
    include_self  := ! slot.external;
    function_pointer := REG;
    (slot.result_type != NULL).if {
      result.make_type (slot.result_type);
    };
    Self
  );

  - make_ptrcall function:REG :SELF <-
  (
    receiver      := EXPR;
    args          := FAST_ARRAY(EXPR).create 0;
    result        := REG.clone;
    slot          := NULL;
    include_self  := FALSE;
    function_pointer := function;
    Self
  );
  
  - add_argument v:EXPR :SELF <-
  [
    -? { v != NULL };
  ]
  (
    args.add_last v;
    Self
  );

Section Private
  
  + args :FAST_ARRAY(EXPR);

  + slot :SLOT;
  
  + function_pointer :REG;

