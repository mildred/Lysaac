Section Header

  + name := CLUSTER;

Section Inherit

  + parent_any :Expanded ANY;

  - parent_i_find_type :Expanded I_FIND_TYPE;

Section Insert
  
  + parent_error_collector :Expanded ERR_COLLECTOR;

Section Public

  - made      :BOOLEAN <- state >= state_made;      // Object is made
  - parsed    :BOOLEAN <- state >= state_parsed;    // AST is ready
  - defined   :BOOLEAN <- state >= state_defined;   // External interfaces are defined
  - compiled  :BOOLEAN <- state >= state_compiled;  // Code is compiled
  - linked    :BOOLEAN <- state >= state_linked;    // Link checks are made
  - generated :BOOLEAN <- state >= state_generated; // Code is generated

  + path :CSTRING;
  
  + filename :CSTRING;
  
  + name :CSTRING <-
  ( + str :ABSTRACT_STRING;
    
    str := PATH_HELPER.basename filename;
    name := str.substring (str.lower) to (str.upper - 4).as_upper
  );
  
  - prototype_for_role r:CSTRING :PROTOTYPE <-
  [ -? {parsed}; ]
  (
    prototype_roles.fast_reference_at r
  );
  
  - type_for_role r:CSTRING :TYPE <-
  [ -? {parsed}; ]
  ( + p:PROTOTYPE;
    + res:TYPE;
    
    ((p := prototype_for_role r) != NULL).if {
      res := p.to_type;
    };
    res
  );
  
  - type_block :TYPE <-
  [ -? {parsed}; ]
  ( + p:PROTOTYPE;
    + res:TYPE;
    
    ((p := prototype_for_role "Block") != NULL).if {
      res := p.to_type_block;
    };
    res
  );
  
  - display <-
  (
    "◆ Root Cluster".println;
    display_indent "";
  );
  
  - compile gen:GENERATOR <-
  [ -? {made}; ]
  (
    progress_step (cur_step,num_steps) message "Compile cluster";
    cur_step  := cur_step  + 1;
    num_steps := num_steps + num_prototypes * 8;
    parse_my_prototypes;
    define_my_prototypes;
    compile_my_prototypes_and_slots;
    link_my_slots;
    generate_my_slots gen;
  );

  - make_path p:CSTRING :SELF <-
  (
    make_error_collector;
    num_prototypes := 0;
    cur_step := 0;
    num_steps := 1;
    prototype_roles := HASHED_DICTIONARY(PROTOTYPE,CSTRING).create;
    list := FAST_ARRAY(CLUSTER_ITEM).create 0;
    path := p;
    filename := NULL;
    slots := LIST_PROC.clone.make;
    parse path root TRUE;
    state := state_made;
    Self
  );
  
  - make_file f:CSTRING :SELF <-
  ( + e:ERR;
    make_error_collector;
    num_prototypes := 0;
    cur_step := 0;
    num_steps := 1;
    prototype_roles := HASHED_DICTIONARY(PROTOTYPE,CSTRING).create;
    list := FAST_ARRAY(CLUSTER_ITEM).create 0;
    filename := f;
    slots := LIST_PROC.clone.make;
    e := PARSER_CLI.clone.make Self.parse;
    e.assert;
    state := state_made;
    Self
  );
  
  - find_type type_name:CSTRING :TYPE <-
  [ -? {made}; ]
  ( + it :ITERATOR(CLUSTER_ITEM);
    + res :TYPE;
  
    (it := list.iterate).loop_v { i:CLUSTER_ITEM;
      ((i.is_prototype) && {i.name == type_name}).if {
        it.stop;
        ? { i.prototype.made };
        res := i.prototype.to_type;
      };
    };
    res
  );
  
  - loop_errors blc:{ERR;} <-
  (
    error_collection.iterate.loop_v blc;
    list.iterate.loop_v { i:CLUSTER_ITEM;
      i.is_prototype.if {
        i.prototype.loop_errors blc;
      };
    };
  );
  
  - warn_errors <-
  (
    error_collection.iterate.loop_i { i:INTEGER; error_collection.item i.println; };
    list.iterate.loop_v { i:CLUSTER_ITEM;
      i.is_prototype.if {
        i.prototype.warn_errors;
      };
    };
  );

Section PROTOTYPE

  - set_prototype p:PROTOTYPE for_role r:CSTRING <-
  [
    -? {made};
    -? { (p = NULL) || {! prototype_roles.fast_has r} };
  ]
  (
    prototype_roles.fast_put p to r;
  );

Section PARSER

  - check_prototype_for_role r:CSTRING :PROTOTYPE <-
  (
    prototype_roles.fast_reference_at r
  );

Section PARSER_CLI

  - set_path p:CSTRING <-
  [ -? {! made}; ]
  ( + ptr :POINTER;
    + it :ITERATOR(CSTRING);
    
    ((p.first = '/') || {p.first = '.'}).if {
      path := PATH_HELPER.compose p base (PATH_HELPER.dirname filename);
    } else {
      (it := lisaac_path.iterate).loop_v { s:CSTRING;
        path := PATH_HELPER.compose p base s;
        ptr := LIBC.fopen(path, "r");
        (ptr = NULL).if {
          path := NULL;
        } else {
          LIBC.fclose(ptr);
          it.stop;
        };
      };
    };
    (path != NULL).if {
      parse path root TRUE;
    };
  );

Section Private

  + num_prototypes :INTEGER  := 0;
  
  + cur_step :INTEGER := 0;
  + num_steps :INTEGER := 0;

  + state :INTEGER;
  
  - state_none      :INTEGER := 0;
  - state_made      :INTEGER := 1;
  - state_parsed    :INTEGER := 2;
  - state_defined   :INTEGER := 3;
  - state_compiled  :INTEGER := 4;
  - state_linked    :INTEGER := 5;
  - state_generated :INTEGER := 6;

  + prototype_roles :HASHED_DICTIONARY(PROTOTYPE,CSTRING);

  + list :FAST_ARRAY(CLUSTER_ITEM) := FAST_ARRAY(CLUSTER_ITEM).create 0;
  
  + slots :LIST_PROC;
  
  - find_name (name:STRING, file:ABSTRACT_STRING) <-
  ( + i :INTEGER;
    name.clear;
    i := file.lower;
    {(i <= file.upper) && {file.item i != '.'}}.while_do {
      name.add_last (file.item i.to_upper);
      i := i + 1;
    };
  );

  - parse path:CSTRING root root:BOOLEAN <-
  ( + p:POINTER;
    + s, s2:STRING;
    + nac:NATIVE_ARRAY(CHARACTER);
    + i:INTEGER;
    + has_source :BOOLEAN;

    s2 := STRING.create 32;

    p := LIBC.opendir(path);
    (p != NULL).if {
      {(i, nac) := LIBC.readdir(p);
       nac != NULL
      }.while_do {
        s := nac;
        (i != LIBC.dt_dir).if {
          ((s.has_suffix ".li") || {s.has_suffix ".cli"}).if {
            + ci :CLUSTER_ITEM;
            find_name (s2, s);
            has_source := TRUE;
            s.add_first '/';
            s.prepend path;
            ci := CLUSTER_ITEM.clone.make s2 file s parent Self;
            ci.is_prototype.if {
              num_prototypes := num_prototypes + 1;
            };
            list.add_last ci;
            list.quick_sort_with { (a,b:CLUSTER_ITEM); a.name ~> b.name };
          };
        };
      };
      LIBC.closedir(p);
    };
    ((has_source) || {root}).if {
      p := LIBC.opendir(path);
      (p != NULL).if {
        {(i, nac) := LIBC.readdir(p);
         nac != NULL
        }.while_do {
          s := nac;
          ((s !== ".") && {s !== ".."} && {i = LIBC.dt_dir}).if {
            s.add_first '/';
            s.prepend path;
            parse s root FALSE;
          };
        };
        LIBC.closedir(p);
      };
    };
  );
  
  - display_indent ind:ABSTRACT_STRING <-
  ( + it:ITERATOR(CLUSTER_ITEM);
    + s :ABSTRACT_STRING;

    s := ind + "│ ";

    ind.print;
    list.is_empty.if { "  ".print; } else { "│ ".print; };
    (path = NULL).if {
      "Could not find cluster".println;
    } else {
      "Cluster in: ".print;
      path.println;
    };
    (it := list.iterate).loop_v { i:CLUSTER_ITEM;
      ind.print;
      it.last.if {
        "╰─".print;
        s := ind + "  ";
      } else {
        "├─".print;
      };
      i.is_prototype.if {
        "◇ ".print;
      } else {
        "◆ ".print;
      };
      i.name.print;
      " (".print;
      i.filename.print;
      ")".println;
      i.is_cluster.if {
        i.cluster.display_indent s;
      };
    };
  );
  
  - lisaac_path :FAST_ARRAY(CSTRING) <-
  ( + result :FAST_ARRAY(CSTRING);
    + arr :FAST_ARRAY(STRING);
    + env :STRING;
    
    result := FAST_ARRAY(CSTRING).create_with_capacity 4;
  
    env := ENVIRONMENT.get_environment_variable "LYSAAC_PATH";
    (env = NULL).if {
      result.add_last ((PATH_HELPER.xdg_data_home + "/lysaac/lib").to_string);
      PATH_HELPER.xdg_data_dirs.iterate.loop_v { s:CSTRING;
        result.add_last ((s + "/lysaac/lib").to_string);
      };
      result.add_last ("/usr/local/share/lysaac/lib");
      result.add_last ("/usr/share/lysaac/lib");
    } else {
      arr := FAST_ARRAY(STRING).create_with_capacity 2;
      env.split_str ":" in arr;
      arr.iterate.loop_v { s:STRING;
        (s != NULL).if {
          result.add_last s;
        };
      };
    };
    
    
    lisaac_path := result
  )
  [
    +? { ! Result.fast_has NULL };
  ];

  - parse_my_prototypes <-
  // 1.a  Parse in the AST
  (
    list.iterate.loop_v { i:CLUSTER_ITEM;
      i.is_prototype.if {
        progress_step (cur_step,num_steps) message ("Parse " + i.prototype.name);
        cur_step  := cur_step  + 1;
        i.prototype.parse;
      };
    };
    state := state_parsed;
  );
  
  - define_my_prototypes <-
  // 1.b  Define external interface of prototypes
  (
    list.iterate.loop_v { i:CLUSTER_ITEM;
      i.is_prototype.if {
        progress_step (cur_step,num_steps) message ("Define " + i.prototype.name);
        cur_step  := cur_step  + 1;
        i.prototype.define_in slots;
      };
    };
    state := state_defined;
  );

  - compile_my_prototypes_and_slots <-
  // 2.a  Compile the prototype code
  // 2.b  Compile all of the slots
  (
    list.iterate.loop_v { i:CLUSTER_ITEM;
      i.is_prototype.if {
        progress_step (cur_step,num_steps) message ("Compile " + i.prototype.name);
        cur_step  := cur_step  + 1;
        i.prototype.compile;
      };
    };
    num_steps := num_steps - num_prototypes * 3 + slots.count * 3;
    slots.set_percentage (num_steps, cur_step);
    slots.compile;
    state := state_compiled;
  );
  
  - link_my_slots <-
  // 3.   Link (don't do much, now except check one error)
  (
    list.iterate.loop_v { i:CLUSTER_ITEM;
      i.is_prototype.if {
        progress_step (cur_step,num_steps) message ("Link " + i.prototype.name);
        cur_step  := cur_step  + 1;
        i.prototype.link;
      };
    };
    slots.link;
    state := state_linked;
  );

  - generate_my_slots gen:GENERATOR <-
  // 4.   Generate code
  (
    list.iterate.loop_v { i:CLUSTER_ITEM;
      i.is_prototype.if {
        progress_step (cur_step,num_steps) message ("Generate " + i.prototype.name);
        cur_step  := cur_step  + 1;
        i.prototype.generate gen;
      };
    };
    slots.generate gen;
    state := state_generated;
  );
