Section Header

  + name := REG;
  
  // A var is a promise between a SINGLE producer (writer) and a consumer
  // (reader). It is realized when the generator gives it a name or an
  // identifier. It corresponds to an LLVM register.

Section Inherit

  + parent_any :Expanded ANY;
  
Section Public

  - to_string :STRING <-
  ( + res:STRING;
    res := type_name + "<" + prefix + "\"" + name + "\"" + "." + identifier.to_string + "?pretty_name=" + pretty_name + "&base_type=";
    (m_base_type = NULL).if {
      res.append "NULL>";
    } else {
      res.append (m_base_type.to_string + ">");
    };
    res
  );
  
  - make_duplicate_of other:SELF <-
  (
    is_valid.if {
      m_base_type := other.base_type.dup;
    };
  );
  
  //
  // Predicates
  //

  - is_realized :BOOLEAN <- ( name.count != 0 ) || { prefix.count != 0 } || { identifier != 0 };
  
  + is_valid :BOOLEAN;
  - is_null  :BOOLEAN <- ( ! is_valid );
  
  //
  // Attributes
  //
  
  + pretty_name :CSTRING := "";
  
  - base_type :LOW_LEVEL_TYPE <-
  [ -? { is_valid }; ]
  ( m_base_type   );
  
  //
  // Construction
  //
  
  - make_type t:LOW_LEVEL_TYPE :SELF <-
  [
    -? { t != NULL };
  ]
  (
    is_valid := TRUE;
    m_base_type := t;
    name := "";
    identifier := 0;
    pretty_name := "";
    Self
  );
  
  - make_from other:REG :SELF <-
  (
    is_valid    := other.is_valid;
    m_base_type := other.m_base_type;
    name := "";
    identifier := 0;
    pretty_name := "";
    Self
  );
  
  - make_pretty_name n:CSTRING :SELF <-
  (
    pretty_name := n;
    Self
  );
  
  //
  // Type Resolving
  //
  
  - compatible_with t:LOW_LEVEL_TYPE <-
  (
    m_base_type.compatible_with t.if_false {
      crash_with_message(to_string + " is incompatible with " + t.to_string);
    };
  );
  
  - resolve_base_type_with other:LOW_LEVEL_TYPE <-
  (
    m_base_type.resolve_with other.if_false {
      crash_with_message("Try to resolve " + to_string + " with " + other.to_string + ": incompatible types");
    };
  );
  
  //
  // Realization
  //
  
  - realize_using v:REG <-
  [ -? { v.is_realized }; ]
  (
    prefix := v.prefix;
    name   := v.name;
    identifier := v.identifier;
  )
  [ +? { is_realized }; ];
  
  - realize_default_value gen:GENERATOR <-
  (
    base_type.realize_default_value gen for Self;
  );
  
  //
  // Generation
  //

  - generate_arg gen:GENERATOR <- generate_arg gen name pretty_name;
  
  - generate_arg gen:GENERATOR name n:CSTRING <-
  [ -? { is_valid };
    -? { name.count = 0 };
    -? { identifier = 0 };
    -? { ! is_realized };
  ]
  (
    base_type.void.if_false {
      gen.arg_name n variable Self;
    };
  )
  [ -? { is_realized }; ];

Section GENERATOR

  + identifier :INTEGER := 0;
  + prefix :CSTRING := "";
  + name :CSTRING := "";

  - realize_code c:CSTRING :SELF <-
  [
    -? { SELF != Self };
    -? { name.count = 0 };
    -? { identifier = 0 };
  ]
  (
    prefix := c;
    name := "";
    identifier := 0;
    Self
  );

  - realize p:CSTRING id id:INTEGER :SELF <-
  [ -? { SELF != Self }; ]
  (
    prefix := p;
    name := "";
    identifier := id;
    Self
  );

  - realize p:CSTRING name n:CSTRING :SELF <-
  [ -? { SELF != Self }; ]
  (
    prefix := p;
    name := n;
    identifier := 0;
    Self
  );
  
  - generate_type gen:GENERATOR <-
  (
    is_valid.if {
      base_type.generate gen;
    } else {
      gen.type_void;
    };
  );

Section Private

  + m_base_type :LOW_LEVEL_TYPE;

