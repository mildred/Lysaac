Section Header

  + name := INSTR_STRING;

Section Inherit

  + parent_instr :Expanded INSTR;

Section Public

  + string :CSTRING;
  
  + static_type :TYPE;

  //
  // Link
  //
  
  - link;
  
  //
  // Generate
  //

  - generate gen:GENERATOR <-
  (
    has_been_declared.if_false {
      gen.declare_private_constant_string string in global_var;
    };
    gen.getelementptr_of global_var in result refs {
      gen.arg_i32 0;
      gen.arg_i32 0;
    };
  );
  
Section ITM_EXPR_STR

  - make s:CSTRING static_type t:TYPE :SELF <-
  (
    has_been_declared := FALSE;
    string := s;
    static_type := t;
    global_var := REG.clone.make_type (BASE_TYPE.create_pointer (BASE_TYPE.create_vector (string.count+1) of (BASE_TYPE.i8)));
    result := REG.clone.make_type t;
    Self
  );

Section Private

  + global_var :REG;

  - has_been_declared :BOOLEAN <- (global_var != NULL);

