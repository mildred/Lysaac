Section Header

  + name := INSTR_CALL;

Section Inherit

  + parent_instr :Expanded INSTR;

Section Public

  + receiver :EXPR;
  
  + include_self :BOOLEAN;

  //
  // Link
  //
  
  - link gen:GENERATOR;

  //
  // Generate
  //

  - generate gen:GENERATOR <-
  ( + r:REG;
    function_pointer.is_valid.if {
      r := function_pointer;
    } else {
      r := slot.global_symbol;
    };
    gen.call r args { generate_args gen; } result result;
  );

Section Private

  - generate_args gen:GENERATOR <-
  (
    include_self.if {
      generate_arg receiver in gen;
    };
    args.iterate.loop_v { a:EXPR;
      ? { a.type.resolved };
      generate_arg a in gen;
    };
  );

  - generate_arg arg:REG in gen:GENERATOR <-
  [ -? { arg.is_valid }; ]
  (
    arg.base_type.is_void.if_false {
      gen.call_arg arg type { arg.base_type.generate gen };
    };
  );

Section Public

  - make_read receiver_expr:EXPR slot s:SLOT :SELF <-
  [
    -? { s != NULL  };
    -? { receiver_expr.is_valid };
  ]
  (
    receiver      := receiver_expr;
    args          := FAST_ARRAY(EXPR).create 0;
    slot          := s;
    include_self  := ! slot.external;
    function_pointer := REG;
    (slot.result_type != NULL).if {
      result      := slot.result_type.create_reg;
    } else {
      result      := REG.clone;
    };
    Self
  );

  - make_ptrcall function:REG of s:SLOT :SELF <-
  (
    receiver      := EXPR;
    args          := FAST_ARRAY(EXPR).create 0;
    result        := REG.clone;
    slot          := s;
    include_self  := FALSE;
    function_pointer := function;
    Self
  );
  
  - add_argument v:EXPR :SELF <-
  [
    -? { v != NULL };
  ]
  (
    args.add_last v;
    Self
  );
  
  - finalize :ERR <-
  [
    -? { slot.self.is_valid };
  ]
  ( + e:ERR;
    e := ERR.clone;
    (slot.arguments.count != args.count).if {
      e <! slot.position.error("Try to call this slot with " + args.count.to_string + " arguments instead of " + slot.arguments.count.to_string);
    } else {
      include_self.if {
        ? { slot.self != NULL };
        ? { slot.self.type != NULL };
        receiver.implement_type_with (slot.self.type.resolve_type).if_false {
          not_yet_implemented;
          e <! ERR;
        };
      };
      args.lower.to (args.upper) do { i:INTEGER;
        + formal, actual :EXPR;
        actual := args.item i;
        formal := slot.arguments.item i;
        actual.implement_type_with (formal.type.resolve_type).if_false {
          not_yet_implemented;
          e <! ERR;
        };
      };
    };
    made := e.success;
    e
  );
  
  - finalize_in list:LIST :ERR <-
  ( + e:ERR;
    e := finalize;
    e.success.if {
      add_in list;
    };
    e
  );

Section Private
  
  + args :FAST_ARRAY(EXPR);

  + slot :SLOT;
  
  + function_pointer :REG;

