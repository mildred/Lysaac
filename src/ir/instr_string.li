Section Header

  + name := INSTR_STRING;

Section Inherit

  + parent_instr :Expanded INSTR;

Section Public

  + string :CSTRING;
  
  + static_type :TYPE;
  
  //
  // List Management
  //

  - add_in list:LIST :SELF <-
  (
    list.list_procs.add_constant Self;
    parent_instr.add_in list
  );

  //
  // Link
  //
  
  - link gen:GENERATOR;
  
  - link_constant gen:GENERATOR <-
  (
    gen.alloc_global global_var;
  );
  
  //
  // Generate
  //

  - generate_constant gen:GENERATOR <-
  (
    gen.declare_private_constant_string string in global_var;
  );

  - generate gen:GENERATOR <-
  (
    gen.getelementptr_of global_var in result refs {
      gen.arg_int 0;
      gen.arg_int 0;
    };
  );
  
Section ITM_EXPR_STR

  - make s:CSTRING static_type t:TYPE :SELF <-
  (
    string := s;
    static_type := t;
    global_var := REG.clone.make_type (BASE_TYPE.create_pointer (BASE_TYPE.create_vector (string.count+1) of (BASE_TYPE.i8)));
    result := t.create_reg;
    made := TRUE;
    Self
  );

Section Private

  + global_var :REG;

