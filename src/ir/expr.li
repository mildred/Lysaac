Section Header

  + name := EXPR;
  
  - export := REG, TYPE;

Section Inherit

  + parent_any :Expanded ANY;

Section Public

  + reg  :REG  := REG;
  
  - type :TYPE <-
  ( + t:TYPE;
    t ?= reg.base_type
  );
  
  - is_valid :BOOLEAN <- (((reg != NULL) || {reg.is_valid}) && {type != NULL});
  
  - is_impl  :BOOLEAN <- type.is_impl;
  
  //////////////////////////////////////////////////////////////////////////////
  //
  // Creation
  //
  
  - make_reg r:REG :SELF <-
  [
    -? { r.is_valid };
    -? { + t:TYPE; t ?= r.base_type; t != NULL };
  ]
  (
    reg := r;
    Self
  )
  [
    +? { is_valid };
  ];
  
  - make_type t:TYPE :SELF <-
  [
    -? { t.can_create_reg };
  ]
  (
    reg := t.create_reg;
    Self
  )
  [
    +? { type = t };
    +? { is_valid };
  ];
  
  //////////////////////////////////////////////////////////////////////////////
  //
  // Implementation
  //
  
  - to_impl_with t:TYPE_IMPL :MAYBE(EXPR) <-
  // Transform a non implemented EXPR into an implemented EXPR
  ( + res :MAYBE(EXPR);
    is_impl.if {
      res << Self;
    } else {
      //not_yet_implemented;
    };
    res
  );
  
  //////////////////////////////////////////////////////////////////////////////
  //
  // Conversions
  //

  - to_reg  :REG  <- [ -? { reg != NULL }; ] reg;
  - to_type :TYPE <- [ -? { is_valid    }; ] type;
  
  - to_string :STRING <- ( type_name + "<" + reg.to_string + ";" + type.to_string + ">" );
  
