Section Header

  + name := EXPR;
  
  - export := REG, TYPE;

Section Inherit

  + parent_any :Expanded ANY;

Section Public
  
  - make_duplicate_of other:SELF <-
  (
    reg := other.reg.dup;
  );

  + pos  :POS  := POS;
  + reg  :REG  := REG;
  + type :TYPE := NULL;
  
  - is_valid :BOOLEAN <- (((reg != NULL) || {reg.is_valid}) && {type != NULL});
  
  - make_type t:TYPE value r:REG :SELF <- make(r, t);
  
  - make_pos p:POS :SELF <-
  (
    pos := p;
    Self
  );

  - make (r:REG, t:TYPE) :SELF <-
  [
    -? { t != NULL };
    -? { r != NULL };
    -? { ! r.base_type.is_void };
    -? { r.is_valid };
    t          .resolved.if { -? { r.base_type.same_as t }; };
    r.base_type.resolved.if { -? { t.same_as (r.base_type) }; };
  ]
  (
    reg  := r;
    type := t;
    Self
  )
  [
    +? { is_valid };
  ];
  
  - make_type t:TYPE :SELF <-
  [
    -? { t != NULL };
    -? { t.can_create_reg };
  ]
  (
    make(t.create_reg, t)
  );

  - to_reg  :REG  <- [ -? { reg != NULL }; ] reg;
  - to_type :TYPE <- [ -? { is_valid    }; ] type;
  
  - to_string :STRING <- ( type_name + "<" + reg.to_string + ";" + type.to_string + ">" );
  
  - implement_type_with other:TYPE :BOOLEAN <-
  ( + res:BOOLEAN;
    type.same_as other.if {
      reg.resolve_base_type_with other;
      type ?= type.resolve_with other;
      ? { type != NULL };
      res  := TRUE;
    } else {
      res := FALSE;
    };
    res
  )
  [
    Result.if {
      +? {type.resolved};
      +? {reg.base_type.resolved};
    };
    +? { reg.base_type.same_as type };
    +? { type.same_as (reg.base_type) };
  ];

