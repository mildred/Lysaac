Section Header

  + name := INSTR_GETELEMPTR;

Section Inherit

  + parent_instr :Expanded INSTR;

Section Public

  //
  // Link
  //
  
  - link gen:GENERATOR;

  //
  // Generate
  //

  - generate gen:GENERATOR <-
  (
    gen.getelementptr_of value in result refs {
      path.iterate.loop_v { i:INTEGER;
        gen.arg_int i;
      };
    };
  );

  - make r:REG slot s:SLOT :SELF <-
  [
    r.base_type.pointer.if_false {
      warnln("INSTR_GETELEMPTR.make " + r.to_string + " slot " + s.to_string + " non pointer register");
    };
    -? { r.base_type.pointer };
    -? { r.base_type.pointer_type.struct };
    -? { s.type_index >= 0 };
    r.base_type.pointer_type.struct_types.valid_index (s.type_index).if_false {
      warnln("INSTR_GETELEMPTR.make slot " + s.to_string + " with invalid type_index");
      warnln("slot type index: " + s.type_index.to_string);
      warnln("base type      : " + r.base_type.to_string);
    };
    -? { r.base_type.pointer_type.struct_types.valid_index (s.type_index) };
    -? { s.result_type.ref_base_type == r.base_type.pointer_type.struct_types.item (s.type_index) };
  ]
  ( + res_type :BASE_TYPE;
    value := r;
    path  := FAST_ARRAY(INTEGER).create_with_capacity 1;
    path.add_last 0;
    path.add_last (s.type_index);
    
    res_type := r.base_type.pointer_type.struct_types.item (s.type_index);
    result := REG.clone.make_type (BASE_TYPE.create_pointer res_type);
    made := TRUE;
    Self
  );

Section Private

  + value :REG;
  + path  :FAST_ARRAY(INTEGER);

