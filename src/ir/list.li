Section Header

  + name := LIST;

Section Inherit

  + parent_any :Expanded ANY;

Section Public

  + list_procs :LIST_PROC;
  
  + error_collector :ERR_COLLECTOR;
  
  - assert_result_coherent_with t:TYPE <-
  (
    first_result_or_invalid.is_valid.if {
      ? { t != NULL };
      (first_result_or_invalid.base_type == t.base_type).if_false {
        crash_with_message (first_result_or_invalid.base_type.to_string + " !== " + t.base_type.to_string);
      };
      ? { first_result_or_invalid.base_type == t.base_type };
    } else {
      ? { t = NULL };
    };
  );

Section PROC, PROTOTYPE

  - make_error_collector e:ERR_COLLECTOR type t:TYPE :SELF <-
  (
    instructions    := FAST_ARRAY(INSTR).create 0;
    results         := FAST_ARRAY(REG).create 0;
    error_collector := e;
    result_type     := t;
    Self
  );
  
  - make_self s:EXPR :SELF <-
  [
    -? {s != NULL};
    -? {s.is_valid};
    -? {s.reg.base_type.pointer};
  ]
  (
    self := s;
    Self
  );
  
Section PROC, PROTOTYPE

  - link gen:GENERATOR <-
  (
    instructions.iterate.loop_v { i:INSTR;
      i.link gen;
    };
  );

  - generate gen:GENERATOR <-
  (
    instructions.iterate.loop_v { i:INSTR;
      i.generate gen;
    };
  );

  - set_list_procs l:LIST_PROC :SELF <- (list_procs := l; Self);

Section INSTR

  - add_instruction i:INSTR <-
  (
    instructions.add_last i;
  );

Section ITM_EXPR_GROUP, SLOT

  - add_result res:REG <-
  [ "multiple results not yet implemented" -? { results.is_empty }; ]
  (
    results.add_last res;
    results.is_empty.if_false {
      results.first.base_type.resolve_with_and_assert (result_type.base_type);
    };
    assert_result_coherent_with result_type;
  );
  
Section SLOT

  + results :FAST_ARRAY(REG);
  
  - first_result_or_invalid :REG <-
  ( + res :REG;
    results.is_empty.if {
      res := REG;
    } else {
      res := results.first;
    };
    res
  );

Section ITM_EXPR, PROC_BLOCK, SLOT

  + self :EXPR;

Section Private

  + instructions :FAST_ARRAY(INSTR);
  
  + result_type :TYPE;

