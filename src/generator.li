Section Header

  + name := GENERATOR;

Section Inherit

  + parent_any :Expanded ANY;

Section Public

  - crash <- crash_with_message output;

  - int_size :INTEGER := 32;

  //
  // Link
  //
  
  - alloc_global r:REG <-
  (
    r.realize "@" id get_global;
  );
  
  - alloc_global r:REG symbol sym:CSTRING :ERR <-
  (
    //TODO: check symbol collision
    r.realize "@" name sym;
    ERR
  );

  //
  // Types
  //

  - type_integer size:INTEGER <-
  (
    (size > 0).if {
      context.add_last 'i';
      size.append_in context;
    } else {
      context.append "int";
      crash_with_message context
    };
  );

  - type_pointer blc:{} <-
  (
    blc.value;
    context.add_last '*';
  );
  
  - type_function <-
  (
    put "void()";
  );
  
  - type_void <-
  (
    put "void";
  );
  
  - type_struct blc:{} <-
  (
    put_c '{';
    blc.value;
    put_c '}';
  );
  
  - type_struct_element blc:{} <- list '{' element blc;
  
  - type_vector num:INTEGER of blc:{} <-
  (
    put_c '[';
    put_int num;
    put " x ";
    blc.value;
    put_c ']';
  );
  
  //
  // Litterals
  //
  
  - expr_integer_value value:INTEGER in var:REG <-
  (
    var.realize_code (value.to_abstract_string);
  );
  
  - expr_undef_in v:REG <-
  (
    v.realize_code "undef";
  );
  
  - expr_function_pointer fn:CSTRING in var:REG <-
  (
    var.realize "@" name fn;
  );
  
  - expr_string_constant_with_nul string:ABSTRACT_STRING <-
  (
    put "c\"";
    string.lower.to (string.upper) do { i:INTEGER;
      + c:CHARACTER;
      c := string.item i;
      ((c != '"') && {c.code.in_range 32 to 127}).if {
        put_c c;
      } else {
        put_c '\\';
        c.to_hexadecimal_in const;
      };
    };
    put "\\00\"";
  );
  
  //
  // Global declarations
  //

  - declare_private_constant_string string:ABSTRACT_STRING in var:REG <-
  [ -?{ var.base_type.pointer }; ]
  (
    context_const {
      put_reg var;
      put " = private constant ";
      var.base_type.pointer_type.generate Self;
      put_c ' ';
      expr_string_constant_with_nul string;
      put "\n";
    };
  );
  
  - global_block_prototype_value v:REG name n:CSTRING <-
  ( + t :BASE_TYPE;
    context_const {
      t := v.base_type;
      t.pointer.if {
        t := t.pointer_type;
      };
      v.realize "@" name n;
      put "define void ";
      put_reg v;
      put " () {\n";
      indent;
      put_indent;
      put "ret void\n";
      unindent;
      put "}\n"
    };
  );
  
  - global_prototype_value v:REG name n:CSTRING <-
  [ -? { v.base_type.pointer }; ]
  ( + t :BASE_TYPE;
    context_const {
      t := v.base_type.pointer_type;
      v.realize "@" name n;
      put_reg v;
      put " = global ";
      t.generate Self;
      put " undef\n";
    };
  );
  
  - global_variable v:REG <-
  [ -? { v.base_type.pointer }; ]
  ( + t :BASE_TYPE;
    context_const {
      t := v.base_type.pointer_type;
      put_reg v;
      put " = global ";
      t.generate Self;
      put " undef\n";
    };
  );
  
  //
  // Subroutines
  //

  - declare_sub name:REG args args:{} return ret:{} <-
  (
    put_indent;
    put "declare ";
    ret.value;
    put " ";
    put_reg name;
    put " (";
    args.value;
    put ")\n\n";
  );
  
  - ctor_sub prio:INTEGER in global:REG do blc:{} <-
  ( + proc:INTEGER;
    constructors.add_last prio;
    constructors.add_last (global.identifier);
    context_const {
      put_indent;
      put "define void ";
      put_reg global;
      put " () {\n";
      indent;
      last_local := 0;
      blc.value;
      put_indent;
      put "ret void\n";
      unindent;
      put_indent;
      put "}\n\n";
    };
  );
  
  - sub name:REG self s:REG args args:{} do blc:{} return r:REG <-
  [ -? { s.is_valid }; ]
  (
    s.make_pretty_name "_self";
    put_indent;
    put "define ";
    put_reg_type r;
    put_c ' ';
    put_reg name;
    put " (";
    args.value;
    put ") {\n";
    last_local := 0;
    indent;
    blc.value;
    put_indent;
    put "ret ";
    r.is_valid.if_true {
      put_reg_type r;
      put_c ' ';
      put_reg r;
    } else {
      put "void";
    };
    put_line;
    unindent;
    put_indent;
    put "}\n\n";
  );
  
  //
  // Instructions
  //
  
  - sizeof type:{} in res:REG <-
  ( + i:INTEGER;
    i := get_local;
    res.realize "%" id get_local;
  
    put_indent;
    put_local i;
    put " = getelementptr ";
    type.value;
    put "* null, ";
    put_int_t;
    put " 1\n";
    
    put_indent;
    put_reg res;
    put " = ptrtoint ";
    type.value;
    put "* ";
    put_local i;
    put " to ";
    put_int_t;
    put "\n";
  );
  
  - alloca count:INTEGER of type:{} in res:REG <-
  (
    put_indent;
    res.realize "%" id get_local;
    put_reg res;
    put " = alloca ";
    type.value;
    (count != 1).if {
      put ", ";
      put_int_t;
      put " ";
      put_int count;
    };
    put_line;
  );
  
  - getelementptr_of receiver:REG in res:REG refs blc:{} <-
  (
    put_indent;
    res.realize "%" id get_local;
    put_reg res;
    put " = getelementptr ";
    put_reg_type_and_name receiver;
    blc.value;
    put_line;
  );
  
  - store value:REG to ptr:REG <-
  (
    put_indent;
    put "store ";
    arg {put_reg_type_and_name value};
    arg {put_reg_type_and_name ptr};
    put_line;
  );
  
  - load_from ptr:REG in res:REG <-
  (
    res.realize "%" id get_local;
    put_indent;
    put_reg res;
    put " = load ";
    arg {put_reg_type_and_name ptr};
    put_line;
  );
  
  - call name:REG args blc:{} result r:REG <-
  (
    put_indent;
    r.is_valid.if {
      r.realize "%" id get_local;
      put_reg r;
      put " = ";
    };
    put "tail call ";
    put_reg_type r;
    put_c ' ';
    put_reg name;
    put "(";
    blc.value;
    put ")\n";
  );
  
  - arg blc:{} <- list '(' element blc;
  
  - arg_int i:INTEGER <-
  (
    arg {
      put_int_t;
      put " ";
      put_int i;
    }
  );
  
  - arg_name n:ABSTRACT_STRING variable var:REG <-
  [ -? { ! var.is_realized }; ]
  (
    arg {
      (n == "").if {
        var.realize "%" id get_local;
      } else {
        var.realize "%" name n;
      };
      put_reg_type_and_name var;
    };
  );
  
  - call_arg var:REG type t:{} <-
  (
    arg {
      t.value;
      put_c ' ';
      put_reg var in code;
    };
  );
  
Section Private
  
  - context_code blc:{} <-
  ( + old:STRING;
    old := context;
    context := code;
    blc.value;
    context := old;
  );
  
  - context_const blc:{} <-
  ( + old:STRING;
    old := context;
    context := const;
    blc.value;
    context := old;
  );

Section LYSAAC

  - get_output :ABSTRACT_STRING <-
  (
    finish;
    output
  );

Section Private

  - output :STRING <- const + "\n\n" + code + "\n";
  
  - finish <-
  ( + it:ITERATOR(INTEGER);
    context_const {
      put "@llvm.global_ctors = appending global [";
      put_int (constructors.count / 2);
      put " x { ";
      put_int_t;
      put ", void ()* }] [";
      (it := constructors.iterate).loop {
        list '[' element {
          put "{ ";
          put_int_t;
          put ", void ()* } { ";
          put_int_t;
          put " ";
          put_int (it.get);
          put ", void ()* ";
          put_global (it.next; it.get);
          put "}";
        };
      };
      put "]";
      put_line;
    };
  );

  + constructors :FAST_ARRAY(INTEGER) := FAST_ARRAY(INTEGER).create 0;

  - list c:CHARACTER element blc:{} <-
  (
    ((context.last != ' ') &&
     {context.last != c}).if
    {
      context.append ", ";
    };
    blc.value;
  );

  + last_global :INTEGER := 0;
  - get_global :INTEGER <-
  (
    last_global := last_global + 1;
    last_global
  );

  + last_local :INTEGER := 0;
  - get_local :INTEGER <-
  (
    last_local := last_local + 1;
    last_local
  );

  + const :STRING := STRING.create 1024;
  + code  :STRING := STRING.create 1024;
  + context :STRING <- code;
  
  - indent   <- (indent_level := indent_level + 1;);
  - unindent <- (indent_level := indent_level - 1;);
  + indent_level :INTEGER := 0;
  - indent_str :ABSTRACT_STRING <-
  ( + res :ABSTRACT_STRING;
    (indent_level == 0).if {
      res := "";
    }.elseif {indent_level == 1} then {
      res := "  ";
    }.elseif {indent_level == 2} then {
      res := "    ";
    }.elseif {indent_level == 3} then {
      res := "      ";
    }.elseif {indent_level == 4} then {
      res := "        ";
    }.elseif {indent_level == 5} then {
      res := "          ";
    }.elseif {indent_level == 6} then {
      res := "            ";
    }.elseif {indent_level == 7} then {
      res := "              ";
    } else {
      res := "                ";
    };
    res
  );
  
  - put s:ABSTRACT_STRING <- context.append s;
  - put_c c:CHARACTER     <- context.add_last c;
  - put_int i:INTEGER     <- i.append_in context;
  - put_int_t             <- (put_c 'i'; int_size.append_in context;);
  - put_indent            <- put indent_str;
  - put_line              <- put_c '\n';
  - put_reg var:REG       <- put_reg var in context;
  - put_reg_type r:REG    <- r.generate_type Self;
  - put_local  i:INTEGER  <- put_local i in context;
  - put_global i:INTEGER  <- put_global i in context;
  - put_reg p:CSTRING name n:CSTRING <- put_reg p name n in context;
  
  - put_reg_type_and_name r:REG <-
  (
    put_reg_type r;
    put_c ' ';
    put_reg r;
  );
  
  - put_local  i:INTEGER in str:STRING <-
  [ -? { i > 0 }; ]
  ( put_c '%'; (i).append_in context );
  
  - put_global i:INTEGER in str:STRING <-
  [ -? { i > 0 }; ]
  ( put_c '@'; (i - 1).append_in context );
  
  - put_reg p:CSTRING name n:CSTRING in str:STRING <-
  (
    str.append p;
    str.add_last '"';
    str.append n;
    str.add_last '"';
  );
  
  - put_reg var:REG in str:STRING <-
  [ -? { var.is_realized }; ]
  (
    (var.name !== "").if {
      put_reg (var.prefix) name (var.name) in str;
    }.elseif {var.prefix == "@"} then {
      put_global (var.identifier) in str;
    }.elseif {var.prefix == "%"} then {
      put_local (var.identifier) in str;
    } else {
      str.append (var.prefix);
    };
  );


