Section Header

  + name := GENERATOR;

Section Inherit

  + parent_any :Expanded ANY;

Section Public

  - type_integer size:INTEGER <-
  (
    context.add_last 'i';
    size.append_in code;
  );

  - type_pointer blc:{} <-
  (
    blc.value;
    context.add_last '*';
  );
  
  - type_function_pointer <-
  (
    put "void () *";
  );
  
  - type_void <-
  (
    put "void";
  );
  
  - expr_integer_value value:INTEGER in var:REG <-
  (
    var.realize (value.to_abstract_string);
  );
  
  - expr_function_pointer fn:CSTRING in var:REG <-
  (
    var.realize (("@" + fn).to_string);
  );

  - declare_string string:ABSTRACT_STRING in var:REG <-
  (
    context_const {
      var.realize "@" id get_global;
      put_reg var;
      put " = private constant [";
      put_int (string.count+1);
      put " x i8] c\"";
      string.lower.to (string.upper) do { i:INTEGER;
        + c:CHARACTER;
        c := string.item i;
        c.code.in_range 32 to 127.if {
          put_c c;
        } else {
          put_c '\\';
          c.to_hexadecimal_in const;
        };
      };
      put "\\00\"\n";
    };
  );
  
  - get_string_pointer_from from:REG string s:ABSTRACT_STRING to to:REG <-
  (
    to.realize "%" id get_local;
    put_indent;
    put_reg to;
    put " = getelementptr [";
    put_int (s.count+1);
    put " x i8]* ";
    put_reg from;
    put ", i32 0, i32 0\n";
  );

  - declare_sub name:CSTRING args args:{} <-
  (
    put_indent;
    put "declare void @";
    put name;
    put " (";
    args.value;
    put ")\n\n";
  );
  
  - sub name:CSTRING self s:REG args args:{} do blc:{} return r:REG <-
  [ -? { s.is_valid }; ]
  (
    s.make_pretty_name "_self";
    put_indent;
    put "define ";
    put_reg_type r;
    put " @";
    put name;
    put " (";
    s.generate_arg Self;
    args.value;
    context.append ") {\n";
    last_local := 0;
    indent;
    blc.value;
    put_indent;
    put "ret ";
    r.is_valid.if_true {
      put_reg_type r;
      put_c ' ';
      put_reg r;
    } else {
      put "void";
    };
    put_line;
    unindent;
    put_indent;
    put "}\n\n";
  );
  
  - getelementptr_of receiver:REG in res:REG refs blc:{} <-
  (
    put_indent;
    res.realize "%" id get_local;
    put_reg res;
    put " = getelementptr ";
    put_reg_type_and_name receiver;
    blc.value;
    put_line;
  );
  
  - store value:REG to ptr:REG <-
  (
    put_indent;
    put "store ";
    arg {put_reg_type_and_name value};
    arg {put_reg_type_and_name ptr};
    put_line;
  );
  
  - call name:CSTRING args blc:{} result r:REG <-
  (
    put_indent;
    r.is_valid.if {
      r.realize "%" id get_local;
      put_reg r;
      put " = ";
    };
    put "tail call ";
    put_reg_type r;
    put " @";
    put name;
    put "(";
    blc.value;
    put ")\n";
  );
  
  - call_ptr var:REG <-
  (
    put_indent;
    put "tail call void ";
    put_reg var;
    put "(";
    put ")\n";
  );
  
  - arg blc:{} <-
  (
    ((context.last != ' ') && {context.last != '('}).if {
      context.append ", ";
    };
    blc.value;
  );
  
  - arg_i32 i:INTEGER <-
  (
    arg {
      put "i32 ";
      put_int i;
    }
  );
  
  - arg_name n:ABSTRACT_STRING variable var:REG type type:{} <-
  (
    arg {
      (n == "").if {
        var.realize "%" id get_local;
      } else {
        var.realize (("%" + n).to_string);
      };
      type.value;
      put " ";
      put_reg var;
    };
  );
  
  - call_arg var:REG type t:{} <-
  (
    arg {
      t.value;
      context.add_last ' ';
      put_reg var in code;
    };
  );
  
  - context_code blc:{} <-
  ( + old:STRING;
    old := context;
    context := code;
    blc.value;
    context := old;
  );
  
  - context_const blc:{} <-
  ( + old:STRING;
    old := context;
    context := const;
    blc.value;
    context := old;
  );

Section LYSAAC

  - output :STRING <- const + "\n\n" + code + "\n";

Section Private

  + last_global :INTEGER := 0;
  - get_global :INTEGER <-
  (
    last_global := last_global + 1;
    last_global
  );

  + last_local :INTEGER := 0;
  - get_local :INTEGER <-
  (
    last_local := last_local + 1;
    last_local
  );

  + const :STRING := STRING.create 1024;
  + code  :STRING := STRING.create 1024;
  + context :STRING <- code;
  
  - indent   <- (indent_level := indent_level + 1;);
  - unindent <- (indent_level := indent_level - 1;);
  + indent_level :INTEGER := 0;
  - indent_str :ABSTRACT_STRING <-
  ( + res :ABSTRACT_STRING;
    (indent_level == 0).if {
      res := "";
    }.elseif {indent_level == 1} then {
      res := "  ";
    }.elseif {indent_level == 2} then {
      res := "    ";
    }.elseif {indent_level == 3} then {
      res := "      ";
    }.elseif {indent_level == 4} then {
      res := "        ";
    }.elseif {indent_level == 5} then {
      res := "          ";
    }.elseif {indent_level == 6} then {
      res := "            ";
    }.elseif {indent_level == 7} then {
      res := "              ";
    } else {
      res := "                ";
    };
    res
  );
  
  - put s:ABSTRACT_STRING <- context.append s;
  - put_c c:CHARACTER     <- context.add_last c;
  - put_int i:INTEGER     <- i.append_in context;
  - put_indent            <- put indent_str;
  - put_line              <- put_c '\n';
  - put_reg var:REG       <- put_reg var in context;
  - put_reg_type r:REG    <- r.generate_type Self;
  
  - put_reg_type_and_name r:REG <-
  (
    put_reg_type r;
    put_c ' ';
    put_reg r;
  );
  
  - put_reg var:REG in str:STRING <-
  (
    warnln ("put reg " + var.to_string);
    str.append (var.name);
    (var.name == "@").if {
      ? { var.identifier > 0 };
      (var.identifier - 1).append_in str;
    }.elseif {var.name == "%"} then {
      ? { var.identifier > 0 };
      var.identifier.append_in str;
    };
  );


