Section Header

  + name := GENERATOR;

Section Inherit

  + parent_any :Expanded ANY;

Section Public

  - type_integer size:INTEGER <-
  (
    context.add_last 'i';
    size.append_in code;
  );

  - type_pointer blc:{} <-
  (
    blc.value;
    context.add_last '*';
  );

  - declare_string string:ABSTRACT_STRING in var:VAR <-
  (
    context_const {
      var.realize "@" id get_var;
      put_var var in const;
      context.append " = ";
      context.append "private constant [";
      (string.count+1).append_in const;
      context.append " x i8] c\"";
      string.lower.to (string.upper) do { i:INTEGER;
        + c:CHARACTER;
        c := string.item i;
        c.code.in_range 32 to 127.if {
          context.add_last c;
        } else {
          context.add_last '\\';
          c.to_hexadecimal_in const;
        };
      };
      context.append "\\00\"\n";
    };
  );

  - declare_sub name:CSTRING args args:{} <-
  (
    context.append indent_str;
    context.append "declare void @";
    context.append name;
    context.append " (";
    args.value;
    context.append ")\n\n";
  );
  
  - sub name:CSTRING args args:{} do blc:{} <-
  (
    context.append indent_str;
    context.append "define void @";
    context.append name;
    context.append " (";
    args.value;
    context.append ") {\n";
    indent;
    blc.value;
    context.append indent_str;
    context.append "ret void\n";
    unindent;
    context.append indent_str;
    context.append "}\n\n";
  );
  
  - call name:CSTRING args blc:{} <-
  (
    context.append indent_str;
    context.append "tail call void @";
    context.append name;
    context.append "(";
    blc.value;
    context.append ")\n";
  );
  
  - arg blc:{} <-
  (
    (context.last = '(').if_false {
      context.append ", ";
    };
    blc.value;
  );
  
  - call_arg var:VAR <-
  (
    arg {
      put_var var in code;
    };
  );
  
  - context_code blc:{} <-
  ( + old:STRING;
    old := context;
    context := code;
    blc.value;
    context := old;
  );
  
  - context_const blc:{} <-
  ( + old:STRING;
    old := context;
    context := const;
    blc.value;
    context := old;
  );

Section LYSAAC

  - output :STRING <- const + "\n\n" + code + "\n";

Section Private

  + last_var :INTEGER := 0;
  - get_var :INTEGER <-
  (
    last_var := last_var + 1;
    last_var
  );

  + const :STRING := STRING.create 1024;
  + code  :STRING := STRING.create 1024;
  + context :STRING <- code;
  
  - indent   <- (indent_level := indent_level + 1;);
  - unindent <- (indent_level := indent_level - 1;);
  + indent_level :INTEGER := 0;
  - indent_str :ABSTRACT_STRING <-
  ( + res :ABSTRACT_STRING;
    (indent_level == 0).if {
      res := "";
    }.elseif {indent_level == 1} then {
      res := "  ";
    }.elseif {indent_level == 2} then {
      res := "    ";
    }.elseif {indent_level == 3} then {
      res := "      ";
    }.elseif {indent_level == 4} then {
      res := "        ";
    }.elseif {indent_level == 5} then {
      res := "          ";
    }.elseif {indent_level == 6} then {
      res := "            ";
    }.elseif {indent_level == 7} then {
      res := "              ";
    } else {
      res := "                ";
    };
    res
  );
  
  - put_var var:VAR in str:STRING <-
  (
    str.append (var.name);
    (var.identifier != 0).if {
      (var.identifier - 1).append_in str;
    };
  );


