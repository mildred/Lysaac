Section Header

  + name := VAR;
  
  // A var is a promise between a SINGLE producer (writer) and a consumer
  // (reader). It is realized when the generator gives it a name or an
  // identifier. It corresponds to an LLVM register.

Section Inherit

  + parent_any :Expanded ANY;
  
Section Public

  - is_realized :BOOLEAN <- ( name.count != 0 );
  
  - is_valid :BOOLEAN <- ( has_writer );
  - is_null  :BOOLEAN <- ( ! is_valid );
  
  - has_writer :BOOLEAN <- (writer_instruction != NULL);
  
  - writer :INSTR <-
  [ -? {has_writer}; ]
  ( writer_instruction );
  
  + type :TYPE := NULL;
  
  + pretty_name :CSTRING;

  - make writer_instr:INSTR static_type t:TYPE :SELF <-
  (
    writer_instruction := writer_instr;
    type := t;
    name := "";
    identifier := 0;
    pretty_name := "";
    Self
  );
  
  - make_pretty_name n:CSTRING :SELF <-
  (
    pretty_name := n;
    Self
  );

  - generate_arg gen:GENERATOR <- generate_arg gen name pretty_name;
  
  - generate_arg gen:GENERATOR name n:CSTRING <-
  (
    gen.arg_name n variable Self type { type.generate gen; };
  );
  
  - realize_using v:VAR <-
  (
    realize (v.name) id (v.identifier);
  );

Section GENERATOR

  + identifier :INTEGER := 0;
  + name :CSTRING := "";

  - realize n:CSTRING :SELF <-
  [
    -? { name.count = 0 };
    -? { identifier = 0 };
  ]
  (
    name := n;
    identifier := 0;
    Self
  );

  - realize n:CSTRING id id:INTEGER :SELF <-
  (
    name := n;
    identifier := id;
    Self
  );

Section Private

  + writer_instruction :INSTR;
