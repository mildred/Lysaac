Section Header

  + name := BASE_TYPE;
  
  // Parent for all types, even those whhich appears only at low level code
  // generation.

Section Inherit

  + parent_abstract_type :Expanded ABSTRACT_TYPE;
  
Section Public

  //
  // Assertions
  //

  - a_void     <- ? { is_void     };
  - a_integer  <- ? { is_integer  };
  - a_pointer  <- ? { is_pointer  };
  - a_struct   <- ? { is_struct   };
  - a_function <- ? { is_function };
  - a_vector   <- ? { is_vector   };
  
  - a_struct_valid_index i:INTEGER <-
  (
    ? { is_struct };
    ? { struct_valid_index i };
  );
  
Section Public

  - is_void     :BOOLEAN <- (deferred; TRUE);
  - is_integer  :BOOLEAN <- (deferred; FALSE);
  - is_pointer  :BOOLEAN <- (deferred; FALSE);
  - is_struct   :BOOLEAN <- (deferred; FALSE);
  - is_function :BOOLEAN <- (deferred; FALSE);
  - is_vector   :BOOLEAN <- (deferred; FALSE);
  
  //
  // Integer type
  //
  
  - integer_size :INTEGER <- [a_integer;] (deferred; 0);
  - is_integer_constant :BOOLEAN <- (integer_size <= 0);
  
  //
  // Pointer type
  //

  - to_pointer_deref    :BASE_TYPE <- [a_pointer;] (deferred; BASE_TYPE);
  - to_pointer_indirect :BASE_TYPE <- (TYPE_POINTER.create Self) [Result.a_pointer;];
  
  - dereference_abstract_type :ABSTRACT_TYPE <- to_pointer_deref;
  
  //
  // Structure type
  //
  
  - struct_size                  :INTEGER   <- [a_struct;] (deferred; 0);
  - struct_valid_index i:INTEGER :BOOLEAN   <- (i >= 0) && {i < struct_size};
  - to_struct_member   i:INTEGER :BASE_TYPE <- [a_struct_valid_index i;] (deferred; BASE_TYPE);
  
  //
  // Vector type
  //

  - vector_type   :BASE_TYPE <- [a_vector;] (deferred; BASE_TYPE);
  - vector_length :INTEGER   <- [a_vector;] (deferred; 0);
  
  //
  // Create Register
  //

  - can_create_reg :BOOLEAN <- TRUE;
  
  - create_reg :REG <- REG.clone.make_type Self;
  
  //
  // Generation
  //
  
  - generate gen:GENERATOR <- deferred;
  
  //
  // Type resolution
  //
  
  - same_as other:BASE_TYPE :BOOLEAN <-
  [
    -? { other.resolved };
  ]
  ( + res :BOOLEAN;
    is_void.if {
      res := other.is_void;
    }.elseif {is_integer} then {
      res := (other.is_integer)
          && { (is_integer_constant) || {integer_size == other.integer_size}};
    }.elseif {is_pointer} then {
      res := (other.is_pointer)
          && {to_pointer_deref.same_as(other.to_pointer_deref)};
    }.elseif {is_struct} then {
      + i :INTEGER;
      res := (other.is_struct)
          && {struct_size = other.struct_size};
      {(res) && {i < struct_size}}.while_do {
        res := (to_struct_member i).same_as(other.to_struct_member i);
        i := i + 1;
      };
    }.elseif {is_function} then {
      res := other.is_function;
    }.elseif {is_vector} then {
      res := (other.is_vector)
          && {vector_length == other.vector_length}
          && {vector_type.same_as(other.vector_type)};
    } else {
      res := same_as_otherwise other;
    };
    res
  );
  
  - resolved :BOOLEAN <- (deferred; TRUE);

  - resolve_with other:BASE_TYPE :BASE_TYPE <-
  [
    -? { same_as other  };
    -? { other.resolved };
  ]
  (
    deferred; BASE_TYPE
  )
  [
    +? { Result != NULL  };
    +? { Result.resolved };
  ];
  
  //
  // Misc
  //
  
  - to_string :STRING <- type_name + "<" + to_llvm + ">";
  
  - to_llvm :STRING <-
  ( + res:STRING;
    res := "".to_string;
    to_llvm_in res;
    res
  );
  
  - to_llvm_in res:STRING <-
  (
    is_void.if {
      res.append "void";
    }.elseif {is_integer} then {
      is_integer_constant.if {
        res.append "int"; 
      } else {
        res.append "i";
        integer_size.append_in res;
      };
    }.elseif {is_pointer} then {
      to_pointer_deref.to_llvm_in res;
      res.add_last '*';
    }.elseif {is_struct} then {
      res.append "{";
      0.to (struct_size - 1) do { i:INTEGER;
        to_struct_member i.to_llvm_in res;
        (i < (struct_size - 1)).if {
          res.add_last ',';
        };
      };
      res.append "}";
    }.elseif {is_function} then {
      res.append "void()";
    }.elseif {is_vector} then {
      res.append "[";
      vector_length.append_in res;
      res.append "x";
      vector_type.to_llvm_in res;
      res.append "]";
    } else {
      not_yet_implemented;
    };
  );
  
Section BASE_TYPE

  - same_as_otherwise other:BASE_TYPE :BOOLEAN <-
  (
    crash_with_message("Comparison between " + to_string + " and " + other.to_string);
    FALSE
  );
