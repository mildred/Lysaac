Section Header

  + name := TYPE_IMPL;

Section Inherit

  + parent_type :Expanded TYPE;
  
Section Public
  
  //////////////////////////////////////////////////////////////////////////////
  //
  // Identification
  //
  
  - name :CSTRING <- (keywords_str + prototype.name).to_abstract_string;
  - is_void :BOOLEAN <- base_type.is_void;
  
  - is_struct :BOOLEAN <- base_type.is_struct;
  - is_integer :BOOLEAN <- base_type.is_integer;
  - integer_size :INTEGER <- base_type.integer_size;
  - struct_size  :INTEGER <- base_type.struct_size;
  - to_struct_member i:INTEGER :BASE_TYPE <- base_type.to_struct_member i;
    
  - resolved :BOOLEAN <- TRUE;

  + prototype :PROTOTYPE;

  //////////////////////////////////////////////////////////////////////////////
  //
  // Create Register
  //

  - can_create_reg :BOOLEAN <- prototype.defined;
  
  - create_reg :REG <- REG.clone.make_type base_type;
  
  //////////////////////////////////////////////////////////////////////////////
  //
  // Generate
  //

  - generate gen:GENERATOR <-
  (
    (base_type = NULL).if {
      crash_with_message ("Cannot generate type for "+prototype.name);
      not_yet_implemented;
    } else {
      base_type.generate gen;
    };
  );
  
  //////////////////////////////////////////////////////////////////////////////
  //
  // Implementation Slots
  //

  - resolve_with other:BASE_TYPE :BASE_TYPE <- Self;
  
  - to_impl :TYPE_IMPL <- Self;
  
  //////////////////////////////////////////////////////////////////////////////
  //
  // Other
  //
  
  - to_string :STRING <-
  ( + res :STRING;
    
    prototype.defined.if {
      res := type_name + "<" + name + " " + base_type.to_string + ">";
    } else {
      res := type_name + "<" + name + " (prototype undefined yet)>";
    };
    res
  );

  - to_pointer_deref    :BASE_TYPE <-
  [
    -? {reference};
  ]
  ( + res:BASE_TYPE;
    block.if {
      res := base_type.to_pointer_deref;
    } else {
      res := prototype.to_type_expanded;
    };
    res
  );
  
  - to_pointer_indirect :BASE_TYPE <-
  ( + res:BASE_TYPE;
    expanded.if {
      res := prototype.to_type_reference;
    } else {
      res := TYPE_POINTER.create Self;
    };
    res
  );

  
  //////////////////////////////////////////////////////////////////////////////
  //
  // Creation
  //

Section PROTOTYPE

  - make_reference p:PROTOTYPE :SELF <-
  [
    -? { p.made };
    -? { p.role !== "Block" };
  ]
  (
    block := FALSE;
    expanded := FALSE;
    prototype := p;
    Self
  );

  - make_expanded p:PROTOTYPE :SELF <-
  [
    -? { p.made };
    -? { p.role !== "Block" };
  ]
  (
    block := FALSE;
    expanded := TRUE;
    prototype := p;
    Self
  );
  
  - make_block p:PROTOTYPE :SELF <-
  [
    -? { p.made };
    -? { p.role == "Block" };
  ]
  (
    block := TRUE;
    prototype := p;
    expanded := FALSE;
    Self
  );
  
Section TYPE

  - implementation :TYPE_IMPL <- Self;

Section Private

  + base_type :BASE_TYPE <-
  [ -? { prototype.defined }; ]
  (
    //warnln("TYPE_IMPL<" + name + ">.base_type");
    block.if {
      base_type := TYPE_FUNCTION.create.to_pointer_indirect;
    } else {
      base_type := prototype.base_type;
      (base_type = NULL).if {
        base_type := TYPE_STRUCT.create { st:TYPE_STRUCT;
          prototype.slots.iterate.loop_v { s:SLOT;
            s.not_shared.if {
              (s.result_type = NULL).if {
                warnln (s.to_string + " has no result type");
              } else {
                st.add_type (s.result_type.resolve);
                //warnln(" - add " + s.external_name);
              };
            } else {
              //warnln(" - do not add " + s.external_name);
            };
          };
        };
      };
      reference.if {
        base_type := base_type.to_pointer_indirect;
      };
    };
    base_type
  );

