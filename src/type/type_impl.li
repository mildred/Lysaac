Section Header

  + name := TYPE_IMPL;
  
  - export := BASE_TYPE;

Section Inherit

  + parent_type :Expanded TYPE;
  
Section Public
  
  //////////////////////////////////////////////////////////////////////////////
  //
  // Identification
  //
  
  + type_reg :REG;
  
  - external_name :CSTRING <- (keywords_str '_' + prototype.name).to_abstract_string;
  - name :CSTRING <- (keywords_str ' ' + prototype.name).to_abstract_string;
  - void :BOOLEAN <- FALSE;

  + prototype :PROTOTYPE;
  
  - struct_base_type :BASE_TYPE <-
  [ -? { prototype.defined }; ]
  ( + base_type :BASE_TYPE;
    block.if {
      base_type := BASE_TYPE.create_pointer (BASE_TYPE.create_function);
    } else {
      expanded.if {
        base_type := prototype.struct_base_type;
      } else {
        base_type := BASE_TYPE.create_pointer (prototype.struct_base_type);
      };
    };
    base_type
  );
  
  - ref_base_type :BASE_TYPE <- BASE_TYPE.create_ref type_reg;
  
  //////////////////////////////////////////////////////////////////////////////
  //
  // Create Register
  //

  - can_create_reg :BOOLEAN <- prototype.defined;
  
  - create_reg :REG <- REG.clone.make_type ref_base_type;
  
  //////////////////////////////////////////////////////////////////////////////
  //
  // Generate
  //

  - generate gen:GENERATOR <-
  (
    gen.type_reg type_reg;
  );

Section PROTOTYPE

  - link_definition gen:GENERATOR <-
  (
    gen.alloc_type type_reg name external_name;
  );

  - generate_definition gen:GENERATOR <-
  (
    gen.type_definition type_reg do {
      struct_base_type.generate gen;
    };
  );

Section Public
  
  //////////////////////////////////////////////////////////////////////////////
  //
  // Implementation Slots
  //
  
  - consistent_with_base t:BASE_TYPE :BOOLEAN <- ( ref_base_type == t );

  - to_impl :TYPE_IMPL <- Self;
  
  - is_impl :BOOLEAN <- TRUE;
  
  //////////////////////////////////////////////////////////////////////////////
  //
  // Other
  //
  
  - to_string :STRING <-
    type_name + "<" + name + " " + ref_base_type.to_string + ">";

  - to_base_type :BASE_TYPE <- ref_base_type;

  
  //////////////////////////////////////////////////////////////////////////////
  //
  // Creation
  //

Section PROTOTYPE

  - make_reference p:PROTOTYPE :SELF <-
  [
    -? { p.made };
    -? { p.role !== "Block" };
  ]
  (
    block := FALSE;
    expanded := FALSE;
    prototype := p;
    type_reg := REG.clone;
    Self
  );

  - make_expanded p:PROTOTYPE :SELF <-
  [
    -? { p.made };
    -? { p.role !== "Block" };
  ]
  (
    block := FALSE;
    expanded := TRUE;
    prototype := p;
    type_reg := REG.clone;
    Self
  );
  
  - make_block p:PROTOTYPE :SELF <-
  [
    -? { p.made };
    -? { p.role == "Block" };
  ]
  (
    block := TRUE;
    prototype := p;
    expanded := FALSE;
    type_reg := REG.clone;
    Self
  );

