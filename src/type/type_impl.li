Section Header

  + name := TYPE_IMPL;
  
  - export := LOW_LEVEL_TYPE;

Section Inherit

  + parent_type :Expanded TYPE;
  
Section Public
  
  //////////////////////////////////////////////////////////////////////////////
  //
  // Identification
  //

  - name             :CSTRING       <- (keywords_str + prototype.name).to_abstract_string;

  + is_block         :BOOLEAN       := FALSE;
  - is_reference     :BOOLEAN       <- ( ! is_expanded);
  + is_expanded      :BOOLEAN       := FALSE;
  + is_strict        :BOOLEAN       := FALSE;

  - is_pointer       :BOOLEAN       <- is_reference;
  - is_void          :BOOLEAN       <- TRUE;
  - is_impl          :BOOLEAN       <- TRUE;


  + prototype        :PROTOTYPE;

  
  //////////////////////////////////////////////////////////////////////////////
  //
  // Create Register
  //

  - can_create_reg :BOOLEAN <- prototype.defined;
  
  //////////////////////////////////////////////////////////////////////////////
  //
  // Generate
  //

  - generate gen:GENERATOR <-
  (
    not_yet_implemented;
  );

  
  //////////////////////////////////////////////////////////////////////////////
  //
  // Other
  //
  
  - to_string :STRING <-
    type_name + "<" + name + ">";
  
  //////////////////////////////////////////////////////////////////////////////
  //
  // Creation
  //

Section PROTOTYPE

  - make_reference p:PROTOTYPE :SELF <-
  [
    -? { p.made };
    -? { p.role !== "Block" };
  ]
  (
    is_block := FALSE;
    is_expanded := FALSE;
    prototype := p;
    Self
  );

  - make_expanded p:PROTOTYPE :SELF <-
  [
    -? { p.made };
    -? { p.role !== "Block" };
  ]
  (
    is_block := FALSE;
    is_expanded := TRUE;
    prototype := p;
    Self
  );
  
  - make_block p:PROTOTYPE :SELF <-
  [
    -? { p.made };
    -? { p.role == "Block" };
  ]
  (
    is_block := TRUE;
    is_expanded := FALSE;
    prototype := p;
    Self
  );

