Section Header

  + name := TYPE_IMPL;
  
  - export := LOW_LEVEL_TYPE;

Section Inherit

  + parent_type :Expanded TYPE;
  
Section Public
  
  //////////////////////////////////////////////////////////////////////////////
  //
  // Identification
  //
  
  - name :CSTRING <- (keywords_str + prototype.name).to_abstract_string;
  - is_void :BOOLEAN <- base_type.is_void;
  
  - is_struct :BOOLEAN <- base_type.struct;
  - is_integer :BOOLEAN <- base_type.integer;
  - integer_size :INTEGER <- base_type.integer_size;
  - struct_size  :INTEGER <- base_type.struct_size;
  - to_struct_member i:INTEGER :BASE_TYPE <- base_type.to_struct_member i;
    
  - resolved :BOOLEAN <- TRUE;

  + prototype :PROTOTYPE;
  
  + base_type :LOW_LEVEL_TYPE <-
  [ -? { prototype.defined }; ]
  (
    block.if {
      base_type := LOW_LEVEL_TYPE.create_pointer (LOW_LEVEL_TYPE.create_function);
    } else {
      + prototype_base_type :LOW_LEVEL_TYPE;
      prototype_base_type := prototype.base_type;
      (prototype_base_type = NULL).if {
        prototype_base_type := LOW_LEVEL_TYPE.create_struct;
        prototype.slots.iterate.loop_v { s:SLOT;
          s.shared.if_false {
            prototype_base_type.struct_types.add_last (s.result_type.to_impl.base_type);
          };
        };
      };
      expanded.if {
        base_type := prototype_base_type;
      } else {
        base_type := LOW_LEVEL_TYPE.create_pointer prototype_base_type;
      };
    };
    base_type
  );
  
  //////////////////////////////////////////////////////////////////////////////
  //
  // Create Register
  //

  - can_create_reg :BOOLEAN <- prototype.defined;
  
  - create_reg :REG <- REG.clone.make_type base_type;
  
  //////////////////////////////////////////////////////////////////////////////
  //
  // Generate
  //

  - generate gen:GENERATOR <-
  (
    (base_type = NULL).if {
      crash_with_message ("Cannot generate type for "+prototype.name);
      not_yet_implemented;
    } else {
      base_type.generate gen;
    };
  );
  
  //////////////////////////////////////////////////////////////////////////////
  //
  // Implementation Slots
  //

  - resolve_with other:BASE_TYPE :BASE_TYPE <- Self;
  
  - consistent_with_base t:LOW_LEVEL_TYPE :BOOLEAN <- ( base_type == t );

  - to_impl :TYPE_IMPL <- Self;
  
  - is_impl :BOOLEAN <- TRUE;
  
  //////////////////////////////////////////////////////////////////////////////
  //
  // Other
  //
  
  - to_string :STRING <-
    type_name + "<" + name + " " + base_type.to_string + ">";

  - to_low_level_type :LOW_LEVEL_TYPE <- base_type;

  - to_pointer_deref    :BASE_TYPE <-
  [
    -? {reference};
  ]
  ( + res:BASE_TYPE;
    block.if {
      res := base_type.to_pointer_deref;
    } else {
      res := prototype.to_type_expanded;
    };
    res
  );
  
  - to_pointer_indirect :BASE_TYPE <-
  ( + res:BASE_TYPE;
    expanded.if {
      res := prototype.to_type_reference;
    } else {
      not_yet_implemented;
    };
    res
  );

  
  //////////////////////////////////////////////////////////////////////////////
  //
  // Creation
  //

Section PROTOTYPE

  - make_reference p:PROTOTYPE :SELF <-
  [
    -? { p.made };
    -? { p.role !== "Block" };
  ]
  (
    block := FALSE;
    expanded := FALSE;
    prototype := p;
    Self
  );

  - make_expanded p:PROTOTYPE :SELF <-
  [
    -? { p.made };
    -? { p.role !== "Block" };
  ]
  (
    block := FALSE;
    expanded := TRUE;
    prototype := p;
    Self
  );
  
  - make_block p:PROTOTYPE :SELF <-
  [
    -? { p.made };
    -? { p.role == "Block" };
  ]
  (
    block := TRUE;
    prototype := p;
    expanded := FALSE;
    Self
  );

