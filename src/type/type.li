Section Header

  + name := TYPE;

Section Inherit

  + parent_base_type :Expanded BASE_TYPE;
  
Section Public
  
  //////////////////////////////////////////////////////////////////////////////
  //
  // Identification
  //
  
  - name      :CSTRING <- deferred;
  + block     :BOOLEAN := FALSE;
  - reference :BOOLEAN <- ( ! expanded );
  + expanded  :BOOLEAN := FALSE;
  + strict    :BOOLEAN := FALSE;
  - is_void   :BOOLEAN <- TRUE;
  
  //////////////////////////////////////////////////////////////////////////////
  //
  // Create Register
  //

  - can_create_reg :BOOLEAN <- FALSE;
  
  - create_reg :REG <- deferred;
  
  //////////////////////////////////////////////////////////////////////////////
  //
  // Generate
  //

  - generate gen:GENERATOR <-
  (
    crash "Try to generate type " + name
  );
  
  //////////////////////////////////////////////////////////////////////////////
  //
  // Implementation Slots
  //
  
  - consistent_with_base t:LOW_LEVEL_TYPE :BOOLEAN <- deferred;
  
  - to_impl_of other:TYPE_IMPL :MAYBE(TYPE_IMPL) <-
  ( + res:MAYBE(TYPE_IMPL);
    (other = NULL).if {
      is_void.if {
        res << to_impl;
      } else {
        res <! ERR.create(("Void is not consistent with "+name).to_abstract_string);
      };
    }.elseif {consistent_with_base other} then {
      res << other;
    } else {
      res <! ERR.create(("Type "+other.name+" is not consistent with "+name).to_abstract_string);
    };
    res
  );

  + to_impl :TYPE_IMPL;
  
  - is_impl :BOOLEAN <- FALSE;
  
  //////////////////////////////////////////////////////////////////////////////
  //
  // Creation
  //
  
  - make_with_implementation impl:TYPE_IMPL :SELF <-
  (
    to_impl := impl;
    Self
  );
  
  //////////////////////////////////////////////////////////////////////////////
  //
  // Other
  //
  
  - to_string :STRING <- type_name + "<" + name + ">";

Section TYPE
  
  - keywords_str :CSTRING <-
  ( + res:ABSTRACT_STRING;
    reference.if {
      res := "Reference ";
    } else {
      res := "Expanded ";
    };
    strict.if {
      res := res + "Strict ";
    };
    res
  );
