Section Header

  + name := TYPE;
  
  // Parent for all types that can be associated with any Lysaac expression
  // (prototypes, literal integers, ...)

Section Inherit

  + parent_base_type :Expanded BASE_TYPE;
  
Section Public
  
  //////////////////////////////////////////////////////////////////////////////
  //
  // Identification
  //
  
  - name       :CSTRING <- deferred;
  + block      :BOOLEAN := FALSE;
  - reference  :BOOLEAN <- ( ! expanded );
  + expanded   :BOOLEAN := FALSE;
  + strict     :BOOLEAN := FALSE;
  - is_void    :BOOLEAN <- TRUE;
  - is_pointer :BOOLEAN <- reference;
  
  //////////////////////////////////////////////////////////////////////////////
  //
  // Create Register
  //

  - can_create_reg :BOOLEAN <- FALSE;
  
  - create_reg :REG <- deferred;
  
  //////////////////////////////////////////////////////////////////////////////
  //
  // Generate
  //

  - generate gen:GENERATOR <-
  (
    crash "Try to generate type " + name
  );
  
  //////////////////////////////////////////////////////////////////////////////
  //
  // Implementation Slots
  //

  - resolve_with other:BASE_TYPE :BASE_TYPE <-
  [
    -? { same_as other  };
    -? { other.resolved };
  ]
  (
    deferred; BASE_TYPE
  )
  [
    +? { Result != NULL  };
    +? { Result.resolved };
    +? { +t:TYPE; t ?= Result; t != NULL };
  ];
  
  - resolve :BASE_TYPE <-
  (
    implementation
  )
  [
    +? { Result != NULL  };
    +? { Result.resolved };
    +? { +t:TYPE; t ?= Result; t != NULL };
  ];
  
  - resolve_type :TYPE <- ( + t:TYPE; t ?= resolve );
  
  - resolve_type_with other:BASE_TYPE :TYPE <- ( + t:TYPE; t ?= resolve_with other );

  - to_impl :TYPE_IMPL <- implementation;
  
  //////////////////////////////////////////////////////////////////////////////
  //
  // Creation
  // (This should go in TYPE_LITERAL)
  //
  
  - make_with_implementation impl:TYPE_IMPL :SELF <-
  (
    implementation := impl;
    Self
  );
  
  //////////////////////////////////////////////////////////////////////////////
  //
  // Other
  //
  
  - to_string :STRING <- type_name + "<" + name + ">";

Section TYPE

  + implementation :TYPE_IMPL;
  
  - keywords_str :CSTRING <-
  ( + res:ABSTRACT_STRING;
    reference.if {
      res := "Reference ";
    } else {
      res := "Expanded ";
    };
    strict.if {
      res := res + "Strict ";
    };
    res
  );
