Section Header

  + name := ITM_LOCAL;
  
Section Inherit

  + parent_itm :Expanded ITM;

Section Public

  + name :CSTRING;
  
  + style :ITM_STYLE;
  
  + type :ITM_TYPE;
  
  - read_in list:LIST :MAYBE(EXPR) <-
  ( + r :REG;
    + res :MAYBE(EXPR);
    
    r := INSTR_LOAD
      .clone
      .make pointer
      .add_in list
      .result;
    
    res << EXPR.clone.make (r, full_type);
    res
  );
  
  - write val:EXPR in list:LIST :ERR <-
  (
    INSTR_STORE
      .clone
      .make_store_in pointer value val
      .add_in list;
    ERR
  );

Section ITM_EXPR_GROUP

  - compile_storage_in list:LIST :ERR <-
  ( + e :ERR;
    
    type.to_type.if_false { err:ERR;
      e := err.extend(position, "Could not allocate storage for local " + name);
    } else { t:TYPE;
      full_type := t;
      pointer := INSTR_ALLOCA
        .clone
        .make_type (t.base_type) count 1
        .add_in list
        .result;
    };
    e
  );

Section PARSER

  - make_local (sty:ITM_STYLE, idf:CSTRING, typ:ITM_TYPE) :SELF <-
  (
    typ.set_itm_parent Self;
    style := sty;
    name  := idf;
    type  := typ;
    Self
  );

Section Private

  + pointer :REG;
  
  + full_type :TYPE;

