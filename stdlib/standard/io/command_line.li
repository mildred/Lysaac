///////////////////////////////////////////////////////////////////////////////
//                             Lisaac Library                                //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header

  + name    := COMMAND_LINE;


  - copyright   := "2003-2005 JÃ©rome Boutet, 2003-2007 Benoit Sonntag";

  - comment := "Interface Command line (Unix).";
 /*
Section Inherit

  - parent_traversable:TRAVERSABLE(STRING) := TRAVERSABLE(STRING);
  */
Section Private

  - c_item idx:INTEGER :NATIVE_ARRAY(CHARACTER) <- `arg_vector[@idx]`:NATIVE_ARRAY(CHARACTER);

  - c_count:INTEGER <- `arg_count`:INTEGER;

  - args:FAST_ARRAY(STRING) :=
  ( + result:FAST_ARRAY(STRING);
    + arg:NATIVE_ARRAY(CHARACTER);
    + str:STRING;

    result := FAST_ARRAY(STRING).create_with_capacity c_count;
    0.to (c_count - 1) do { j:INTEGER;
      arg := c_item j;
      str := STRING.create (arg.fast_first_index_of '\0' until 1024);
      str.from_external_copy arg;
      result.add_last str;
    };
    result
  );

Section Public

  - count:INTEGER <- args.count;

  - lower:INTEGER := 0;

  - upper:INTEGER <- args.upper;

  - item i:INTEGER :STRING <- args.item i;

  - executable_name:STRING <- args.first;









