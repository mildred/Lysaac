///////////////////////////////////////////////////////////////////////////////
//                             Lisaac Library                                //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name      := RAW_H;

  - copyright := "Jonathan Ponte, Maxime Audrin, Benoit Sonntag";

  - comment   := "Vertical menu for GUII.";
  
Section Inherit
  
  - parent_internal_inode:INTERNAL_INODE := INTERNAL_INODE;
  
Section Public

- representation:STRING_CONSTANT := "RAW_H";
+ parent:INTERNAL_INODE;

  - make_representation <-
  (
    +expr:G_EXPR;

    list.foreach {
      i:INODE;

      (i.priority>covering).if {
        i.make_representation;
        (expr=NULL).if {
          expr:=i.content;
        } else {
          expr:=expr | i.content;
        };
      };
    };
    content:=G_RAW.create expr;
  );

//
// Evaluation.
//

  - compute_size_from_prc p:INTEGER <-
  [ ? {! list.is_empty}; ]
  (
    reset_size;
    list.foreach {
      i:INODE;
      (i.priority > p).if {
        (width,height):=G_OR_EXPR.predict_size (width,height) and (i.width,i.height);
      };
    };
    (width,height):=G_RAW.predict_size (width,height);
    //"width: ".print;bugw_screen.print;'\n'.print;
    //"height: ".print;bugh_screen.print;'\n'.print;
    //"raw_h.width: ".print;width.print;'\n'.print;
    //"raw_h.height: ".print;height.print;'\n'.print;
  );


  - semantic_evaluation (w,h:INTEGER) :BOOLEAN<-
  (
    bugw_screen:=w;
    bugh_screen:=h;

    !list.is_empty && {
      browse_group { 
        i:INODE;
        (i.operator != '&')
      }
    } && {
      +nb:INTEGER;
      list.foreach {
        i:INODE;
        +tmp:REAL_32;
        +best_prc:REAL_32;
        +son_width:INTEGER;
        +son_height:INTEGER;
        +son_connector_w:INTEGER;
        +son_connector_h:INTEGER;

        (!i.list.is_empty).if {
          tmp:=MENU_V_OUT.evaluate i width screen_width height screen_height;
          (tmp > best_prc).if {
            best_prc:=tmp;
            parent:=MENU_V_OUT;
            son_connector_w:=i.connector_width;
            son_connector_h:=i.connector_height;
            son_width:=i.width;
            son_height:=i.height;
          };
          tmp:=MENU_H_OUT.evaluate i width screen_width height screen_height;
          (tmp > best_prc).if {
            best_prc:=tmp;
            parent:=MENU_H_OUT;
            son_connector_w:=i.connector_width;
            son_connector_h:=i.connector_height;
            son_width:=i.width;
            son_height:=i.height;
          };
          tmp:=WINDOW.evaluate i width screen_width height screen_height;
          (tmp > best_prc).if {
            best_prc:=tmp;
            parent:=WINDOW;
            son_connector_w:=i.connector_width;
            son_connector_h:=i.connector_height;
            son_width:=i.width;
            son_height:=i.height;
          };
        } else {
          tmp:=CHECK.evaluate i width screen_width height screen_height;
          (tmp > best_prc).if {
            best_prc:=tmp;
            parent:=CHECK;
            son_connector_w:=0;
            son_connector_h:=0;
            son_width:=i.width;
            son_height:=i.height;
          };
          tmp:=ACTION.evaluate i width screen_width height screen_height;
          (tmp > best_prc).if {
            best_prc:=tmp;
            parent:=ACTION;
            son_connector_w:=0;
            son_connector_h:=0;
            son_width:=i.width;
            son_height:=i.height;
          };
        };

        (best_prc > 0).if {
          i.set_representation parent;
          i.set_width son_width;
          i.set_height son_height;
          i.set_connector_w son_connector_w;
          i.set_connector_h son_connector_h;
          nb:=nb+1;
        };
      };
      nb=list.count
    }
  );

- space_evaluation (w,h:INTEGER) :REAL_32<-
  (
      + r,result,area:REAL_32;
      // Space evaluation
      compute_size_from_prc 0;
      ((height > h) || {width > w}).if {
	"Priority 0 failed\n".print;
	compute_size_from_prc 25;
	((height > h) || {width > w}).if {
	   "Priority 25 failed\n".print;
	   compute_size_from_prc 50;
	   ((height > h) || {width > w}).if {
		"Priority 50 failed\n".print;
		r:=0;
		set_height 0;
		set_width 0;
                covering:=100;
           } else {
		r:=get_nitem_from_prc 50;
                covering:=50;
	   };
	} else {
	   r:=get_nitem_from_prc 25;
           covering:=25;
	};
      } else {
	r:=list.count;
        covering:=0;
     };
    r:=(r/list.count)*100;
    (r>0).if {
      area:=get_area_prc (w,h);
      (r>area).if {
        result:=r-area;
      } else {
        result:=0;
      };
    } else {
      result:=0;
    };
    result
  )
  [ ? {Result.in_range 0 to 100}; ];


- evaluate n:INODE width w:INTEGER height h:INTEGER : REAL_32<-
  (
    + result:REAL_32;

    n.set_representation RAW_H;

    // Semantic evaluation && Space evaluation.
    "RAW_H semantic evaluation of ".print;n.name.print;"\n".print;
    (n.semantic_evaluation (w,h)).if {
      //" OK\n".print;
      //"RAW_H space evaluation of ".print;n.name.print;"\n".print;
      result:=n.space_evaluation (w,h);
    } else {
      // " FAILED\n".print;
       result:=0;
    };
    "RAW_H result for ".print;n.name.print;"= ".print;result.print;"%\n".print;
    result
  )
  [ ? {Result.in_range 0 to 100}; ];



