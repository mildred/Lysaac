///////////////////////////////////////////////////////////////////////////////
//                             Lisaac Library                                //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header

  + name    := HASHED_DICTIONARY_NODE(V,K);


  - copyright   := "2003-2005 JÃ©rome Boutet, 2003-2007 Benoit Sonntag";

  - comment :="Auxilliary class to implement DICTIONARY(V,K).";

Section Inherit

  - parent_any_hashed_dictionary_node:ANY_HASHED_DICTIONARY_NODE := ANY_HASHED_DICTIONARY_NODE;

Section Public

  + item:V;

  + key:K;

  + next:HASHED_DICTIONARY_NODE(V,K);
  // The `next' one when some clash occurs.

  - set_item i:V <-
  (
    item := i;
  )
  [
    +? {item = i};
  ];

  - set_next n:HASHED_DICTIONARY_NODE(V,K) <-
  (
    next := n;
  )
  [
    +? {next = n};
  ];

  - create i:V to k:K next n:HASHED_DICTIONARY_NODE(V,K) :SELF<-
  ( + result:SELF;

    result := clone;
    result.make i to k next n;
    result
  );

  - make i:V to k:K next n:HASHED_DICTIONARY_NODE(V,K) <-
  (
    item := i;
    key  := k;
    next := n;
  )
  [
    +? {item = i};
    +? {key  = k};
    +? {next = n};
  ];

