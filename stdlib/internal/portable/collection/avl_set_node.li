///////////////////////////////////////////////////////////////////////////////
//                             Lisaac Library                                //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header

  + name := AVL_SET_NODE(V);


  - copyright   := "2003-2005 JÃ©rome Boutet, 2003-2007 Benoit Sonntag";

  - comment := "Auxiliary class to implement AVL_SET.";

  // This a classic implementation of an AVL tree (balanced tree first
  // designed by Adelson-Velskii and Landis, 1960)

Section Inherit

  + parent_avl_tree_node:Expanded AVL_TREE_NODE(V);

  - parent_any_avl_set_node:ANY_AVL_SET_NODE := ANY_AVL_SET_NODE;

Section AVL_SET

  //
  // Creation:
  //

  - create i:V :SELF <-
  ( + result:SELF;

    result := clone;
    result.make i;
    result
  );

  - make i:V <-
  (
    set_balance balanced;
    left  := NULL;
    right := NULL;
    set_item i;
  )
  [
    +? {item = i};
  ];



