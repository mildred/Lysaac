///////////////////////////////////////////////////////////////////////////////
//                           Lisaac-OpenGL library                           //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////

Section Header
  
  + name     := GLSPEC2LI;
  
  - comment  := "Convert the GL/gl.h C header file into GL prototype";
  
Section Inherit
  
  - parent_object:OBJECT := OBJECT;
  
Section Public
  
  - main <-
  ( + s,buffer:STRING;
    + p:POINTER;
    
    (COMMAND_LINE.count > 1).if {
      s := STRING.create_from_string (COMMAND_LINE.item 1);
    } else {
      "Syntax: glspec2li <gl.h>\n".print;
    };
    
    (s != NULL).if {
      buffer := STRING.create 2048;
      
      buffer.append "// **** file generated by glspec2li ****\n";
      convert_file s into buffer;
      
      p := FS_MIN.open_write "gl.li";
      (p != NULL).if {
        FS_MIN.write p with buffer size (buffer.count);
        FS_MIN.close p;
      } else {
        "glspec2li: can't create gl.li\n".print;
      };
    };
  );
  
Section Private
  
  - source:STRING;
  
  
  - convert_file s:STRING into out:STRING <-
  (
    + e:ENTRY;
    + file:STD_FILE;
    + buf,type_ret:STRING;
    + type_arg,name_arg:FAST_ARRAY(STRING);
    + nb_args:INTEGER;
    + end:BOOLEAN;
    
    e := FILE_SYSTEM.get_entry s;
    (e != NULL).if {
      file ?= e;
      file.open;
      
      source := STRING.create (file.size+1);
      buf := STRING.create 64;
      
      file.read source size (file.size);
      file.close;
      
      out.append "Section Header\n\n\
      \  + name     := GL;\n\
      \  - comment  := \"OpenGL C Specification\";\n\n\
      \Section Inherit\n\n\
      \  - parent_object:OBJECT := OBJECT;\n\n\
      \Section Public\n\n";
      
      //
      // Read constants.
      //
      
      out.append "//\n// OpenGL constant.\n//\n\n";
      
      {
        (read_symbol "#define").if {
          read_word;
          buf.copy last_string;
          
          read_word;
          (last_string.first.is_digit).if {
            
            out.append "  - ";
            buf.to_lower;	    
            
            // === some GL lowercased constants have same name with GL functions 
            out.append "cst_";
            // ===
            
            out.append buf;
            out.append ":INTEGER <- ";            
            
            ((last_string.count > 1) &&
              {last_string.first = '0'} && 
            {last_string.item (last_string.lower+1) = 'x'}).if {
              // convert hexa value: 0xFF -> 0FFh
              
              last_string.remove_first 2;
              last_string.add_first '0';
              last_string.add_last 'h';
            };
            out.append last_string;
            out.append ";\n";
          };
        } else {
          // skip token
          read_word;
        };
      }.do_until {position >= source.upper}; 
      
      //
      // Read functions.
      //
      
      position := 0;
      type_ret := STRING.create 16;
      type_arg := FAST_ARRAY(STRING).create_with_capacity 16;
      name_arg := FAST_ARRAY(STRING).create_with_capacity 16;
      0.to 15 do { i:INTEGER;
        type_arg.add_last (STRING.create 16);
        name_arg.add_last (STRING.create 16);
      };
      
      out.append "//\n// OpenGL functions.\n//\n\n";
      
      {
        (read_symbol "WINGDIAPI").if {
          
          // read return type
          read_word;
          (last_string == "const").if {// ignore 'const' keyword
            read_word;
          };
          type_ret.copy (to_lisaac_type last_string);
          
          // skip 'APIENTRY' macro
          read_word; 
          
          // read function name
          read_word;
          buf.copy last_string;   
          
          // emit slot
          out.append "  - ";
          out.append (to_lisaac_name buf);
          
          // read arguments
          read_word;
          nb_args := 0;
          end := FALSE;
          
          (last_string == "(void);").if_false {
            last_string.remove_first 1; // remove '('
            
            {
              (last_string == "const").if {// ignore 'const' keyword
                read_word;
              };
              
              // convert to lisaac type
              type_arg.item nb_args.copy last_string;
              to_lisaac_type (type_arg.item nb_args);
              
              // read arg name
              read_word;
              (last_string.first = '*').if {
                type_arg.item nb_args.copy "POINTER";
                last_string.remove_first 1; // remove '*'
              };
              (last_string.last = ',').if {
                last_string.remove_last 1; // remove ','
              } else {
                last_string.remove_last 2; // remove ');'
                end := TRUE;
              };
              name_arg.item nb_args.copy (to_lisaac_name last_string);
              
              (! end).if {
                read_word;
              };
              
              nb_args := nb_args + 1;
            }.do_until {end || {nb_args >= 16}};
          };
          
          // emit arguments
          (nb_args > 0).if {
            out.append " (";
            0.to (nb_args-1) do { i:INTEGER;
              out.append (name_arg.item i);
              out.append ":";
              out.append (type_arg.item i);
              (i < nb_args-1).if {
                out.append ", ";
              };
            };
            out.append ")";
          };
          // emit result type
          (type_ret == "VOID").if_false {
            out.append " :";
            out.append type_ret;
          };
          
          (nb_args > 6).if { // avoid lisaac compiler line counter overflow
            out.append "\n";
          };
          
          // emit external call
          out.append " <- `";
          out.append buf;
          out.append "(";
          0.to (nb_args-1) do { i:INTEGER;
            out.append "@";
            out.append (name_arg.item i);
            (i < nb_args-1).if {
              out.append ",";
            };
          };
          out.append ")`"; 
          
          // emit external return
          (type_ret == "VOID").if_false {
            out.append ":";
            out.append type_ret;
          };
          out.append ";\n";
          
        } else {
          // skip token
          read_word;
        };
      }.do_until {position >= source.upper};
    };
  );
  
  - tmp:STRING := STRING.create 32;
  
  - to_lisaac_name s:STRING :STRING <-
  (
    tmp.clear;
    s.lower.to (s.upper) do { i:INTEGER;
      (! s.item i.is_upper).if {
        tmp.add_last (s.item i);
      } else {
        tmp.add_last '_';
        tmp.add_last (s.item i.to_lower);
      };
    };
    tmp
  );
  
  - to_lisaac_type s:STRING :STRING <-
  (
    
    (s.last == '*').if {
      s.copy "POINTER";
    } else {
      (s == "void").if {
        s.copy "VOID";
      }.elseif {s == "GLenum"} then {
        s.copy "UINTEGER_32";
      }.elseif {s == "GLboolean"} then {  
        s.copy "UINTEGER_8";
      }.elseif {s == "GLbitfield"} then { 
        s.copy "UINTEGER_32";
      }.elseif {s == "GLbyte"} then {
        s.copy "INTEGER_8";
      }.elseif {s == "GLshort"} then {
        s.copy "INTEGER_16";
      }.elseif {s == "GLint"} then {
        s.copy "INTEGER";
      }.elseif {s == "GLsizei"} then {
        s.copy "INTEGER";
      }.elseif {s == "GLubyte"} then {
        s.copy "UINTEGER_8";
      }.elseif {s == "GLushort"} then {
        s.copy "UINTEGER_16"; 
      }.elseif {s == "GLuint"} then {
        s.copy "UINTEGER_32";
      }.elseif {s == "GLfloat"} then {
        s.copy "REAL_32";  
      }.elseif {s == "GLclampf"} then {
        s.copy "REAL_32"; 
      }.elseif {s == "GLdouble"} then {
        s.copy "REAL_32"; //            double !!!!
      }.elseif {s == "GLclampd"} then {
        s.copy "REAL_32";  //            double !!!!
      }.elseif {s == "GLvoid"} then {
        s.copy "VOID"; 
      }.elseif {s == "GLvoid*"} then {	
        s.copy "POINTER"; // FIXME: void** ??
      } else {
        "\nglspec2li: Warning: unknown C type: ".print;
        s.print;
      };
    };
    s
  );
  
  //
  // Parser.
  //
  
  - position:INTEGER;
  
  - string_tmp:STRING := STRING.create 128;
  
  
  - last_character:CHARACTER <-
  ( + result:CHARACTER;
    (position > source.upper).if {
      result := 0.to_character;
    } else {
      result := source.item position;
    };
    result
  );
  
  - last_string:STRING <- string_tmp;
  
  
  - read_space:BOOLEAN <-
  ( + pos,posold:INTEGER;
    + level_comment:INTEGER;
    
    pos := position;
    posold := -1; 
    
    {posold = position}.until_do {
      posold := position;
      
      // Skip spaces :            
      {(last_character = 0.to_character) || {last_character > ' '}}.until_do {
        position := position + 1;	
      };
      
      (position < source.upper).if {
        // Skip C comment style :
        
        ((last_character = '/') && {source.item (position+1) = '*'}).if {
          position := position + 2; 	  
          level_comment := 1;
          {
            (last_character = 0.to_character) || {level_comment = 0}
          }.until_do {
            ((last_character = '/') && {source.item (position+1) = '*'}).if {
              level_comment := level_comment + 1;
              position := position + 2;
            }.elseif {
              (last_character = '*') && {source.item (position+1) = '/'}
            } then {
              level_comment := level_comment - 1;
              position := position + 2;
            } else {
              position := position+1;
            };
          };
        };
      };
    };
    TRUE
  );
  
  - read_symbol st:ABSTRACT_STRING :BOOLEAN <-
  ( + posold,j:INTEGER;
    + result:BOOLEAN;
    // On passe les espaces :
    (! read_space).if {
      result := FALSE;
    } else {
      posold := position;    
      j := st.lower;
      {(last_character = 0.to_character) ||
      {(j > st.upper) || {last_character != st.item j}}}.until_do {
        j := j+1;
        position := position+1;
      };
      (j > st.upper).if {
        result := TRUE;
      } else {
        position := posold;
        result := FALSE;
      };
    };
    result
  );
  
  - read_word:BOOLEAN <-
  ( + result:BOOLEAN;
    // On passe les espaces :
    (! read_space).if {
      result := FALSE;
    } else {
      
      string_tmp.clear;
      string_tmp.add_last last_character;
      position := position + 1;
      
      {(last_character != 0.to_character) &&
        {! last_character.is_separator}
      }.while_do {
        string_tmp.add_last last_character;
        position := position+1;          
      };
      result := TRUE;      
    };
    result
  );
