///////////////////////////////////////////////////////////////////////////////
//                           Lisaac-OpenGL library                           //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////

Section Header
  
  + name     := RENDERER;
  
  - comment  := "abstract prototype for render systems";
  
Section Inherit
  
  - parent_capabilities:CAPABILITIES := CAPABILITIES;
  
Section Public
  
  - set_capabilities caps:CAPABILITIES <-
  (
    parent_capabilities := caps;
  );
  
  //
  // Renderer settings
  //
  
  - viewport:VIEWPORT; // current viewport
  
  - reshape:RESHAPE := RESHAPE; // for projection modification & re-sizing
   
  //
  // Renderer Modules
  //
  
  - transform:TRANSFORM <- deferred;  // 3D transformation & projection
  - font:FONT <- deferred;           
  - texture1d:TEXTURE <- deferred; 
  - texture2d:TEXTURE <- deferred;    
  - light:LIGHT <- deferred;         
  - material:MATERIAL <- deferred;
  - plane:PLANE <- deferred;
  - quadrics:QUADRICS <- deferred;
  - blending:BLENDING <- deferred;
  - culling:CULLING <- deferred;
  - fog:FOG;
  
  //
  // Renderer features
  //
  
  - vb:VERTEX_BUFFER;  // current vertex buffer
  - vertex_array:VERTEX_BUFFER <- deferred;
  - vertex_buffer:VERTEX_BUFFER <- deferred;
  - index_buffer:INDEX_BUFFER <- deferred;
  - display_list:DISPLAY_LIST <- deferred;
  
  - color_buffer:COLOR_BUFFER <- deferred;
  - depth_buffer:DEPTH_BUFFER <- deferred;
  - stencil_buffer:STENCIL_BUFFER <- deferred;
  - accum_buffer:ACCUM_BUFFER <- deferred;
  - alpha_test:ALPHA_TEST <- deferred;
  - scissor:SCISSOR <- deferred;
  
  - evaluator1d:EVALUATOR1D <- deferred;
  - evaluator2d:EVALUATOR2D <- deferred;
  
  - shader:SHADER <- deferred;
  
  - name_stack:NAME_STACK <- deferred;
  
  - error:ERROR <- (deferred;NULL);  


  - enable_shading <- deferred;
  - disable_shading <- deferred;
  
  - enable_lighting <- deferred;
  - disable_lighting <- deferred;
  
  - enable_auto_normal <- deferred;
  - disable_auto_normal <- deferred;
  
  - wireframe_mode on:BOOLEAN <- deferred;
  
  - set_point_size sz:REAL_32 <- deferred;
  - set_line_width w:REAL_32 <- deferred;

  //
  // Selection mode
  //
  
  - begin_selection_in buffer:FAST_ARRAY(UINTEGER_32) size sz:INTEGER <- deferred;
  - end_selection:INTEGER <- deferred;
  
  - make (w,h:INTEGER) title s:ABSTRACT_STRING <-
  (
    make (w, h) title s fullscreen is_fullscreen;
  );
  
  - initialize <- deferred;
  
  - begin_frame <- deferred;
  - end_frame <- deferred;
  - new_frame body:BLOCK <- deferred;

  - clear_screen <- deferred;

  - set_fog f:FOG <- deferred;

  - resize (w,h:INTEGER) <- deferred;

  - set_reshape r:RESHAPE <-
  (
    reshape := r;
    r.set_render_system Self;
  );
  
  - fatal_error msg:ABSTRACT_STRING <-
  (
    msg.print; 
    die_with_code exit_failure_code;
  );

  // renderer info
  - video_card_name buf:STRING <- deferred;
  - video_card_vendor buf:STRING <- deferred;
  - video_card_version buf:STRING <- deferred;


