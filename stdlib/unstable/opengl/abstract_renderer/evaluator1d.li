///////////////////////////////////////////////////////////////////////////////
//                         Lisaac-OpenGL Library                             //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////

Section Header
  
  + name     := EVALUATOR1D;
  
  - comment  := "Maps a curve line";
  
Section Inherit
  
  + parent_abstract_evaluator:Expanded ABSTRACT_EVALUATOR;
  
Section Public
  
  // mesh drawing modes
  - line:INTEGER <- 1;
  - point:INTEGER <- 2;
  
  
  // load the map function
  - map (n_points,point_size:INTEGER) range (t1,t2:REAL_32) <- deferred;
  
  // generate a point for the parametric value 'val'
  - evaluate val:REAL_32 <- deferred;
  
  // auto generate n points evenly spaced between (t1,t2)
  - generate_grid  nb_points:INTEGER between (t1,t2:REAL_32) <- deferred;
  
  // Warning: mode is defined in the vertex buffer prototype
  - evaluate_mesh mode:INTEGER from start:INTEGER to end:INTEGER <- deferred;
  