///////////////////////////////////////////////////////////////////////////////
//                         Lisaac-OpenGL Library                            //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////

Section Header
  
  + name     := TGA;
  
  - comment  := "tga loader";

Section Inherit
  
  - parent_format:IMAGE_FORMAT := IMAGE_FORMAT;
  
Section Public
  
  - format:STRING_CONSTANT := "tga";
  
  - load image:IMAGE :BOOLEAN <-
  (
    + result:BOOLEAN;
    + tga_buffer:FAST_ARRAY(UINTEGER_8);
    
    + buffer_pos:INTEGER;
    + header:TGA_HEADER;
    
    + image_data:FAST_ARRAY(UINTEGER_8);
    + temp:UINTEGER_8;
    
    + e:ENTRY;
    + file:FILE;

    + channels:INTEGER;
    + stride,i,line_idx:INTEGER;
  
    e := FILE_SYSTEM.get_entry (image.name);
    (e != NULL).if {
      file ?= e;
      file.open;
      
      tga_buffer := FAST_ARRAY(UINTEGER_8).create_with_capacity (file.size+1);
      
      (file.read tga_buffer size (file.size)  > 0).if {
        
        header := CONVERT(NATIVE_ARRAY(UINTEGER_8),TGA_HEADER).on (tga_buffer.storage);
        
        buffer_pos := TGA_HEADER.object_size;
        
        channels := header.bits_per_pixel >> 3;
        image.set_size (header.width, header.height);
        image.set_channels channels;
        
        (! header.is_compressed).if {
          ((channels = 3) || {channels = 4}).if {
            
            stride := image.calculate_stride;//channels * header.width;
            
            image_data := FAST_ARRAY(UINTEGER_8).create (stride * header.height);
            
            // read data line by line
            0.to (header.height-1) do { y:INTEGER;
              
              line_idx := stride*y;
              
              // read current line
              0.to (stride-1) do { k:INTEGER;
                image_data.put (tga_buffer.item buffer_pos) to (line_idx+k);
                buffer_pos := buffer_pos + 1;
              };
              
              // swap bgr to rgb colors
              i := 0;
              {i < stride}.while_do {
                
                temp := image_data.item (line_idx + i);
                image_data.put (image_data.item (line_idx+i+2)) to (line_idx+i);
                image_data.put temp to (line_idx+i+2);
                
                i := i + channels;
              };
            };
            result := TRUE;
            
          }.elseif {channels = 2} then {           
            // 16bit tga 
            
            + r,g,b:UINTEGER_8;
            
            stride := image.calculate_stride;//channels * header.width;
            
            image_data := FAST_ARRAY(UINTEGER_8).create (stride * header.height); 
            // read data
            0.to (header.width*header.height-1) do { y:INTEGER;
              
              temp := tga_buffer.item buffer_pos;
              buffer_pos := buffer_pos + 1;
              
              b := (temp & 01Fh) << 3;
              g := ((temp >> 5) & 01Fh) << 3;
              r := ((temp >> 10) & 01Fh) << 3;
              
              image_data.put r to (y*3);  
              image_data.put g to (y*3+1);
              image_data.put b to (y*3+2);
            };
            result := TRUE;
          };
        } else {
          //
          // load compressed tga
          //
          
          + temp_data:FAST_ARRAY(UINTEGER_8);
          + nb_pixels,current_pixel:INTEGER;
          + color_buffer:FAST_ARRAY(UINTEGER_8);
          + rle_id:UINTEGER_8;
          
          ((channels = 3) || {channels = 4}).if {
            temp_data := FAST_ARRAY(UINTEGER_8).create_with_capacity (header.width * header.height*channels);
            nb_pixels := header.width * header.height;
            color_buffer := FAST_ARRAY(UINTEGER_8).create_with_capacity channels;
            
            {
              // read RLE chunk header 
              rle_id := tga_buffer.item buffer_pos;
              buffer_pos := buffer_pos + 1;
              
              (rle_id < 128).if {
                // read raw colour values
                
                0.to rle_id do { counter:INTEGER;
                  color_buffer.clear;
                  
                  1.to channels do { w:INTEGER;
                    color_buffer.add_last (tga_buffer.item buffer_pos);
                    buffer_pos := buffer_pos + 1;
                  };
                  // transfer pixel colour & swap BGR to RGB
                  temp_data.add_last (color_buffer.item 2);
                  temp_data.add_last (color_buffer.item 1);
                  temp_data.add_last (color_buffer.item 0);
                  
                  (channels = 4).if {
                    temp_data.add_last (color_buffer.item 3);
                  };
                  current_pixel := current_pixel + 1;
                  
                  (current_pixel > nb_pixels).if {
                    error "too many pixels";
                  };
                };
              } else {
                // rle_id >= 128
                
                rle_id := rle_id - 127;
                
                // read chunk color
                color_buffer.clear;       
                1.to channels do { w:INTEGER;
                  color_buffer.add_last (tga_buffer.item buffer_pos);
                  buffer_pos := buffer_pos + 1;
                };
                
                // duplicate pixel value rle_id 'times
                0.to (rle_id-1) do { counter:INTEGER;
                  
                  // swap BGR to RGB
                  temp_data.add_last (color_buffer.item 2);
                  temp_data.add_last (color_buffer.item 1);
                  temp_data.add_last (color_buffer.item 0);
                  
                  (channels = 4).if {
                    temp_data.add_last (color_buffer.item 3);
                  };
                  current_pixel := current_pixel + 1;
                  
                  (current_pixel > nb_pixels).if {
                    error "too many pixels";
                  };
                };
              };
            }.do_while {current_pixel < nb_pixels};
            
            stride := image.calculate_stride;
            image_data := FAST_ARRAY(UINTEGER_8).create (stride * header.height + 1);
            // line by line copy with 32bit aligned
            0.to (header.height-1) do { row:INTEGER;
              i := stride; 
              0.to (i-1) do { j:INTEGER;
                image_data.put (temp_data.item (row*header.width*channels+j)) to (row*stride+j);
              };
            };
            result := TRUE;
          } else {
            error "image not supported";
          };
        };
      };
      image.set_data image_data;
    };
    result
  );