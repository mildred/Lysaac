///////////////////////////////////////////////////////////////////////////////
//                             Application                                   //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name      := LOG;

  - comment   := "Logging System";

Section Inherit

  - parent_object:OBJECT := OBJECT;

Section Public
  
  - max_level:INTEGER <- 4;
  
  + file:POINTER;
  + level:INTEGER;

  
  //
  // Creation.
  //

  - create s:ABSTRACT_STRING level l:INTEGER :SELF <-
  ( + result:SELF;
    result := clone;
    result.make (s,l);
    result
  );

  - make (s:ABSTRACT_STRING, l:INTEGER) <-
  ( 
    level := l;
    file := FS_MIN.open_write s;
  );
  
  - append msg:ABSTRACT_STRING <-
  (
    + buf:STRING;
    
    buf := STRING.create_from_string msg;
    buf.append "\n";
    
    FS_MIN.write file with buf size(buf.count);
  );
  
  - print msg:ABSTRACT_STRING level l:INTEGER <-
  (
    (level + l >= max_level).if {  
      append msg;
    };
  );
  
  - close <-
  (
    FS_MIN.close file;
  );

