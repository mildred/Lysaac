///////////////////////////////////////////////////////////////////////////////
//   Lisaac - SDL binding library                                            //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program. If not, see <http://www.gnu.org/licenses/>.    //
//                                                                           //
//   http://lisaac.org                                                       //
///////////////////////////////////////////////////////////////////////////////

Section Header
  
  + name      := SDL_TTF;

  - copyright := "2010 Xavier Oswald";
  - author    := "Xavier Oswald <xoswald@debian.org>";
  - comment   := "TrueType Font";
  - external  := `#include <SDL/SDL_ttf.h>`;
  - lip       <- (add_lib "-lSDL_ttf -I/opt/local/include/SDL -D_THREAD_SAFE -L/opt/local/lib";);

Section Inherit

  + parent_object:OBJECT := OBJECT;

Section Private

  - pointer :POINTER;

Section Public


//
// Version
//
  // #define TTF_VERSION(X)		SDL_TTF_VERSION(X)
  - major       :INTEGER <- `TTF_MAJOR_VERSION`:(INTEGER);
  - minor       :INTEGER <- `TTF_MINOR_VERSION`:(INTEGER);
  - patch_level :INTEGER <- `TTF_PATCHLEVEL`   :(INTEGER);

//
// Font style
//
  - style_normal    :INTEGER <- `TTF_STYLE_NORMAL`   :(INTEGER);
  - style_bold      :INTEGER <- `TTF_STYLE_BOLD`     :(INTEGER);
  - style_italic    :INTEGER <- `TTF_STYLE_ITALIC`   :(INTEGER);
  - style_underline :INTEGER <- `TTF_STYLE_UNDERLINE`:(INTEGER);

  - print_version <-
  (
    "SDL TTF Version:".print;
    major.print;
    '.'.print;
    minor.print;
    '.'.print;
    patch_level.println
  );

  - init :INTEGER <-
  // Initialize the TTF engine - returns 0 if successful, -1 on error
  (
    `TTF_Init()`:(INTEGER)
  );

  - quit <-
  // De-initialize the TTF engine
  (
    `TTF_Quit()`;
  );

  - was_init :INTEGER <-
  // Check if the TTF engine is initialized
  (
    `TTF_WasInit()`:INTEGER
  );


  - open_font (file:ABSTRACT_STRING, ptsize:INTEGER) :SELF <-
  // Open a font file and create a font of the specified point size.  Some .fon
  // fonts will have several sizes embedded in the file, so the point size
  // becomes the index of choosing which size.  If the value is too high, the
  // last indexed size will be the default.
  ( + result:SELF;
    result := SELF.clone;
    result.make(file, ptsize);
    result
  );

  - make (file:ABSTRACT_STRING, ptsize:INTEGER) <-
  ( + f:NATIVE_ARRAY(CHARACTER);
    f :=  file.to_external;
    pointer := `TTF_OpenFont(@f, @ptsize)`:(POINTER);
  );

/*
extern DECLSPEC TTF_Font * SDLCALL TTF_OpenFontIndex(const char *file, int ptsize, long index);
extern DECLSPEC TTF_Font * SDLCALL TTF_OpenFontRW(SDL_RWops *src, int freesrc, int ptsize);
extern DECLSPEC TTF_Font * SDLCALL TTF_OpenFontIndexRW(SDL_RWops *src, int freesrc, int ptsize, long index);
*/


  - render_text_solid (text:ABSTRACT_STRING, fg:SDL_COLOR) :SDL_SURFACE <-
  ( + t       :NATIVE_ARRAY(CHARACTER);
    + ptr     :POINTER;
    + lptr    :POINTER;
    + surface :SDL_SURFACE;
    
    lptr := pointer;
    t := text.to_external;
    //pointer.println;
    ptr := `TTF_RenderText_Solid(@lptr, @t, *@fg)`:(POINTER);
    surface := CONVERT(POINTER, SDL_SURFACE).on ptr;
    surface
  );

  - close <-
  // Close an opened font file
  (
    `TTF_CloseFont(@Self)`;
    // + Destroy object !
  );
