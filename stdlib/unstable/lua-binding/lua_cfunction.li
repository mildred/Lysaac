Section Header

  + name := LUA_CFUNCTION;

  - author        := "Mildred <mildred593(at)online.fr>";
  - bibliography  := "";
  - comment       := "";

  // Copyright (c) 2007 Mildred <mildred593(at)online.fr>
  //
  // Permission is hereby granted, free of charge, to any person
  // obtaining a copy of this software and associated documentation
  // files (the "Software"), to deal in the Software without
  // restriction, including without limitation the rights to use,
  // copy, modify, merge, publish, distribute, sublicense, and/or sell
  // copies of the Software, and to permit persons to whom the
  // Software is furnished to do so, subject to the following
  // conditions:
  //
  // The above copyright notice and this permission notice shall be
  // included in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  // EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
  // OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  // NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
  // HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
  // WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  // FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  // OTHER DEALINGS IN THE SOFTWARE.

  - external := `#define lisaac_call_lua_cfunction static lisaac_call_lua_cfunction0`;

Section Inherit

  - parent_object :OBJECT := OBJECT;

Section External

  - lisaac_call_lua_cfunction lua_p:POINTER :INTEGER <-
  (
    + res :INTEGER;
    (lua_p != NULL).if_true {
      + self :SELF;
      + lua :LUA_STATE;
      lua := LUA_STATE.create_import lua_p;
      self := CONVERT(POINTER, SELF).on
        (lua.touserdata (`lua_upvalueindex(1)`:INTEGER));
      res := self.call lua;
    };
    res
  );

Section Public

  - call_pointer lua_p:POINTER :INTEGER <-
  (
    + lua :LUA_STATE;
    lua := LUA_STATE.create_import lua_p;
    call lua
  );

  - call lua:LUA_STATE :INTEGER <- block.value lua;

Section Private

  + block :BLOCK :=
  { lua:LUA_STATE;
    lua.is_valid.if_false {
      crash_with_message "Lua call of the default C function.";
    };
    0
  };

  - creator_of_lua_cfunctions :INTEGER :=
  ( + res :INTEGER;
    `/*`;
    res := lisaac_call_lua_cfunction NULL;
    `*/`;
    res
  );

Section Public

  - create block:BLOCK :SELF <-
  (
    + other:SELF;
    other := clone;
    other.make block;
    other
  );

  - make block_:BLOCK <-
  (
    block := block_;
  );

  - get_pointer :POINTER <-
  (
    creator_of_lua_cfunctions;
    `lisaac_call_lua_cfunction0`:POINTER
  );
  /*(
    + block :BLOCK;
    block := Self.block;
    `(void*) @block`:POINTER
  );*/

// kate: hl Lisaac v0.2; indent-width 2; space-indent on; replace-tabs off;
// kate: tab-width 8; remove-trailing-space on;
