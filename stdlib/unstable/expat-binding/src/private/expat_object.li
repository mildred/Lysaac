Section Header

  + name := EXPAT_OBJECT;

  - author        := "Mildred Ki'Lya <mildred593(at)online.fr>";
  - copyright     := "2008 Mildred Ki'Lya";
  - comment       := "";

  // Copyright (c) 2008 Mildred Ki'Lya <mildred593(at)online.fr>
  //
  // Permission is hereby granted, free of charge, to any person
  // obtaining a copy of this software and associated documentation
  // files (the "Software"), to deal in the Software without
  // restriction, including without limitation the rights to use,
  // copy, modify, merge, publish, distribute, sublicense, and/or sell
  // copies of the Software, and to permit persons to whom the
  // Software is furnished to do so, subject to the following
  // conditions:
  //
  // The above copyright notice and this permission notice shall be
  // included in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  // EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
  // OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  // NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
  // HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
  // WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  // FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  // OTHER DEALINGS IN THE SOFTWARE.

  - external := `#include <string.h>`;

Section Inherit

  + parent :Expanded OBJECT;

Section SELF

  - to_external s:ABSTRACT_STRING :NATIVE_ARRAY(CHAR) <-
  ( + ext :NATIVE_ARRAY(CHAR);
    ext := NATIVE_ARRAY(CHAR).create (s.count + 1);
    0.to (s.count - s.lower) do { i:INTEGER;
      ext.put (s.item (i+s.lower)) to i;
    };
    ext.put '\0' to (s.count);
  );

  - from_external_copy a:NATIVE_ARRAY(CHAR) :STRING <-
  ( + res :STRING;
    (a != NULL).if {
      res := STRING.create 0;
      res.from_external_copy a;
    };
    res
  );

  - from_external_copy a:NATIVE_ARRAY(CHAR) length l:INTEGER :STRING <-
  ( + res :STRING;
    (a != NULL).if {
      res := STRING.create (l+1);
      1.to l do { i:INTEGER;
        res.add_last (a.item i);
      };
      res.add_last '\0';
    };
    res
  );

  - from_external_const a:NATIVE_ARRAY(CHAR) :STRING_CONSTANT <-
  ( + res :STRING_CONSTANT;
    (a != NULL).if {
      res := from_external_const a length (strlen a);
    };
    res
  );

  - from_external_const a:NATIVE_ARRAY(CHAR) length l:INTEGER:STRING_CONSTANT <-
  ( + res :STRING_CONSTANT;
    (a != NULL).if {
      res := STRING_CONSTANT.new_intern a count l;
    };
    res
  );

  - strlen a:NATIVE_ARRAY(CHAR) :INTEGER <-
  ( + length :INTEGER;
    length := 0;
    {a.item length !== 0}.while_do {
      length := length + 1;
    };
    ? { `strlen(@a)`:INTEGER == length };
  );

// kate: hl Lisaac v0.2; indent-width 2; space-indent on; replace-tabs off;
// kate: tab-width 8; remove-trailing-space on;
